package com.ankamagames.wakfu.common.game.effect;

import com.ankamagames.baseImpl.common.clientAndServer.utils.*;
import com.ankamagames.baseImpl.common.clientAndServer.game.effect.runningEffect.*;
import com.ankamagames.wakfu.common.game.fighter.*;
import com.ankamagames.baseImpl.common.clientAndServer.game.characteristic.*;
import com.ankamagames.wakfu.common.datas.specific.*;
import com.ankamagames.wakfu.common.game.effectArea.*;
import com.ankamagames.wakfu.common.game.characteristics.craft.*;
import com.ankamagames.wakfu.common.game.characteristics.skill.*;
import com.ankamagames.wakfu.common.game.effect.runningEffect.*;

public final class RunningEffectConstants extends Constants<WakfuRunningEffect>
{
    private static final RunningEffectConstants m_instance;
    public static final RunningEffectDefinition VARIABLE_EFFECT;
    public static final RunningEffectDefinition HP_LOSS;
    public static final RunningEffectDefinition HP_FIRE_LOSS;
    public static final RunningEffectDefinition HP_EARTH_LOSS;
    public static final RunningEffectDefinition HP_WATER_LOSS;
    public static final RunningEffectDefinition HP_AIR_LOSS;
    public static final RunningEffectDefinition HP_LOSS_WITH_KAMAS_WATER;
    public static final RunningEffectDefinition HP_LEECH;
    public static final RunningEffectDefinition HP_LEECH_FIRE;
    public static final RunningEffectDefinition HP_LEECH_EARTH;
    public static final RunningEffectDefinition HP_LEECH_WATER;
    public static final RunningEffectDefinition HP_LEECH_AIR;
    public static final RunningEffectDefinition SET_HP;
    public static final RunningEffectDefinition HP_GAIN_WITH_FEEDBACK;
    public static final RunningEffectDefinition HP_BOOST;
    public static final RunningEffectDefinition HP_DEBOOST;
    public static final RunningEffectDefinition HP_LOSS_ACCUMULATION;
    public static final RunningEffectDefinition COPY_CHARAC_MAX;
    public static final RunningEffectDefinition HP_GAIN;
    public static final RunningEffectDefinition HEAL_GAIN;
    public static final RunningEffectDefinition HEAL_LOSS;
    public static final RunningEffectDefinition DEATH;
    public static final RunningEffectDefinition HP_GAIN_PERCENT_OF_VALUE;
    public static final RunningEffectDefinition ACTION_COST;
    public static final RunningEffectDefinition AP_BOOST;
    public static final RunningEffectDefinition AP_DEBOOST;
    public static final RunningEffectDefinition AP_GAIN;
    public static final RunningEffectDefinition AP_LEECH;
    public static final RunningEffectDefinition AP_GIFT;
    public static final RunningEffectDefinition AP_LOSS;
    public static final RunningEffectDefinition RES_AP_GAIN;
    public static final RunningEffectDefinition CHARAC_GAIN;
    public static final RunningEffectDefinition CHARAC_LOSS;
    public static final RunningEffectDefinition MP_BOOST;
    public static final RunningEffectDefinition MP_DEBOOST;
    public static final RunningEffectDefinition MP_GAIN;
    public static final RunningEffectDefinition MP_LOSS;
    public static final RunningEffectDefinition MP_LEECH;
    public static final RunningEffectDefinition RES_MP_GAIN;
    public static final RunningEffectDefinition SPELL_BOOST_LEVEL;
    public static final RunningEffectDefinition HP_LOSS_WITH_REBOUND;
    public static final RunningEffectDefinition HP_EARTH_LOSS_WITH_REBOUND;
    public static final RunningEffectDefinition HP_FIRE_LOSS_WITH_REBOUND;
    public static final RunningEffectDefinition HP_WATER_LOSS_WITH_REBOUND;
    public static final RunningEffectDefinition HP_AIR_LOSS_WITH_REBOUND;
    public static final RunningEffectDefinition HP_EXCHANGE;
    public static final RunningEffectDefinition HP_GAIN_WITH_REBOUND_WATER;
    public static final RunningEffectDefinition CHARAC_STEAL_WITH_LOSS;
    public static final RunningEffectDefinition AP_LEECH_IN_PERCENT;
    public static final RunningEffectDefinition WP_LEECH_IN_PERCENT;
    public static final RunningEffectDefinition DMG_LEECH_IN_PERCENT;
    public static final RunningEffectDefinition RES_LEECH_IN_PERCENT;
    public static final RunningEffectDefinition MP_LEECH_IN_PERCENT;
    public static final RunningEffectDefinition HP_GAIN_WITH_REBOUND_AIR;
    public static final RunningEffectDefinition RES_HEAL_GAIN;
    public static final RunningEffectDefinition RES_BACK_GAIN;
    public static final RunningEffectDefinition RES_HEAL_LOSS;
    public static final RunningEffectDefinition WP_LEECH;
    public static final RunningEffectDefinition INIT_LEECH;
    public static final RunningEffectDefinition RES_GAIN_IN_PERCENT;
    public static final RunningEffectDefinition RES_FIRE_GAIN_PERCENT;
    public static final RunningEffectDefinition RES_WATER_GAIN_PERCENT;
    public static final RunningEffectDefinition RES_EARTH_GAIN_PERCENT;
    public static final RunningEffectDefinition RES_AIR_GAIN_PERCENT;
    public static final RunningEffectDefinition RES_LOSS_IN_PERCENT;
    public static final RunningEffectDefinition RES_EARTH_LOSS_PERCENT;
    public static final RunningEffectDefinition RES_FIRE_LOSS_PERCENT;
    public static final RunningEffectDefinition RES_WATER_LOSS_PERCENT;
    public static final RunningEffectDefinition RES_AIR_LOSS_PERCENT;
    public static final RunningEffectDefinition DMG_GAIN_IN_PERCENT;
    public static final RunningEffectDefinition DMG_FIRE_GAIN_PERCENT;
    public static final RunningEffectDefinition DMG_EARTH_GAIN_PERCENT;
    public static final RunningEffectDefinition DMG_WATER_GAIN_PERCENT;
    public static final RunningEffectDefinition DMG_AIR_GAIN_PERCENT;
    public static final RunningEffectDefinition FINAL_DMG_IN_PERCENT;
    public static final RunningEffectDefinition FINAL_RES_IN_PERCENT;
    public static final RunningEffectDefinition FINAL_RES_IN_PERCENT_LOSS;
    public static final RunningEffectDefinition FINAL_DMG_IN_PERCENT_LOSS;
    public static final RunningEffectDefinition DMG_LOSS_IN_PERCENT;
    public static final RunningEffectDefinition DMG_FIRE_LOSS_PERCENT;
    public static final RunningEffectDefinition DMG_EARTH_LOSS_PERCENT;
    public static final RunningEffectDefinition DMG_WATER_LOSS_PERCENT;
    public static final RunningEffectDefinition DMG_AIR_LOSS_PERCENT;
    public static final RunningEffectDefinition PUNISHMENT;
    public static final RunningEffectDefinition DAMAGES_REBOUND_IN_PERCENT;
    public static final RunningEffectDefinition DAMAGES_ABSORB_IN_PERCENT;
    public static final RunningEffectDefinition LIFE_STOLEN_BONUS_GAIN;
    public static final RunningEffectDefinition CRITICAL_BONUS_GAIN;
    public static final RunningEffectDefinition CC_GAIN;
    public static final RunningEffectDefinition EC_GAIN;
    public static final RunningEffectDefinition AGILITY_GAIN;
    public static final RunningEffectDefinition AGILITY_LOSS;
    public static final RunningEffectDefinition STRENGTH_GAIN;
    public static final RunningEffectDefinition STRENGTH_LOSS;
    public static final RunningEffectDefinition INTELLIGENCE_GAIN;
    public static final RunningEffectDefinition INTELLIGENCE_LOSS;
    public static final RunningEffectDefinition LUCK_GAIN;
    public static final RunningEffectDefinition LUCK_LOSS;
    public static final RunningEffectDefinition RANGE_GAIN;
    public static final RunningEffectDefinition RANGE_LOSS;
    public static final RunningEffectDefinition PROSPECTION_GAIN;
    public static final RunningEffectDefinition PROSPECTION_LOSS;
    public static final RunningEffectDefinition WISDOM_GAIN;
    public static final RunningEffectDefinition WISDOM_LOSS;
    public static final RunningEffectDefinition FEROCITY_LOSS;
    public static final RunningEffectDefinition FUMBLE_RATE_LOSS;
    public static final RunningEffectDefinition INIT_GAIN;
    public static final RunningEffectDefinition INIT_LOSS;
    public static final RunningEffectDefinition TACKLE_GAIN;
    public static final RunningEffectDefinition TACKLE_LOSS;
    public static final RunningEffectDefinition DODGE_GAIN;
    public static final RunningEffectDefinition DODGE_LOSS;
    public static final RunningEffectDefinition BACKSTAB_BONUS_GAIN;
    public static final RunningEffectDefinition BACKSTAB_BONUS_LOSS;
    public static final RunningEffectDefinition MECHANISM_MASTERY;
    public static final RunningEffectDefinition BONUS_TRAP;
    public static final RunningEffectDefinition BONUS_SUMMON;
    public static final RunningEffectDefinition WP_BOOST;
    public static final RunningEffectDefinition WP_DEBOOST;
    public static final RunningEffectDefinition WP_GAIN;
    public static final RunningEffectDefinition WP_LOSS;
    public static final RunningEffectDefinition WP_STEAL;
    public static final RunningEffectDefinition RAISE;
    public static final RunningEffectDefinition VITALITY_GAIN;
    public static final RunningEffectDefinition VITALITY_LOSS;
    public static final RunningEffectDefinition SKIP_TURN;
    public static final RunningEffectDefinition REDUCE_RANGE_TO_CAC;
    public static final RunningEffectDefinition ROOTED;
    public static final RunningEffectDefinition IMMUNE_TO_MP_LOSS;
    public static final RunningEffectDefinition INVISIBLE;
    public static final RunningEffectDefinition INVISIBLE_SUPERIOR;
    public static final RunningEffectDefinition FIGHT_FORBIDDEN;
    public static final RunningEffectDefinition CHANGE_CONTROLLER;
    public static final RunningEffectDefinition COWARD;
    public static final RunningEffectDefinition HASTE;
    public static final RunningEffectDefinition STABILIZED;
    public static final RunningEffectDefinition CANT_BE_ATTACKED;
    public static final RunningEffectDefinition CANT_TACKLE;
    public static final RunningEffectDefinition STATE_RESISTANCE;
    public static final RunningEffectDefinition NO_FIGHT_XP;
    public static final RunningEffectDefinition SET_MAX_AP_COS;
    public static final RunningEffectDefinition SET_EFFECT_AREA_GRIP;
    public static final RunningEffectDefinition REVEAL_INVISIBLE;
    public static final RunningEffectDefinition UNDEAD;
    public static final RunningEffectDefinition UNTARGETTABLE;
    public static final RunningEffectDefinition IA_DOUBLE_FOCUS;
    public static final RunningEffectDefinition STASIS_1;
    public static final RunningEffectDefinition STASIS_2;
    public static final RunningEffectDefinition STASIS_3;
    public static final RunningEffectDefinition IA_MINIMIZE_FOCUS;
    public static final RunningEffectDefinition RAISE_OUT_OF_COMBAT;
    public static final RunningEffectDefinition GROGGY_1;
    public static final RunningEffectDefinition GROGGY_2;
    public static final RunningEffectDefinition GROGGY_3;
    public static final RunningEffectDefinition CRIPPLED_1;
    public static final RunningEffectDefinition CRIPPLED_2;
    public static final RunningEffectDefinition CRIPPLED_3;
    public static final RunningEffectDefinition LAME;
    public static final RunningEffectDefinition EQUIPMENT_KNOWLEDGE_GAIN;
    public static final RunningEffectDefinition AP_DEBUFF_POWER;
    public static final RunningEffectDefinition MP_DEBUFF_POWER;
    public static final RunningEffectDefinition EXTRA_TURN;
    public static final RunningEffectDefinition NO_DEATH;
    public static final RunningEffectDefinition STATE_APPLICATION_BONUS;
    public static final RunningEffectDefinition DONT_BLOCK_LOS;
    public static final RunningEffectDefinition ESCAPE_TACKLE;
    public static final RunningEffectDefinition CANT_TELEPORT;
    public static final RunningEffectDefinition HP_BOOST_IN_PERCENT_FUNCTION_ALLIES_COUNT;
    public static final RunningEffectDefinition HP_BOOST_IN_PERCENT;
    public static final RunningEffectDefinition HP_GAIN_AIR;
    public static final RunningEffectDefinition HP_GAIN_EARTH;
    public static final RunningEffectDefinition HP_GAIN_WATER;
    public static final RunningEffectDefinition HP_GAIN_FIRE;
    public static final RunningEffectDefinition WISDOM_BOOST;
    public static final RunningEffectDefinition HP_GAIN_AIR_FOR_CASTER_BASED_ON_TARGET;
    public static final RunningEffectDefinition HP_GAIN_EARTH_FOR_CASTER_BASED_ON_TARGET;
    public static final RunningEffectDefinition HP_GAIN_WATER_FOR_CASTER_BASED_ON_TARGET;
    public static final RunningEffectDefinition HP_GAIN_FIRE_FOR_CASTER_BASED_ON_TARGET;
    public static final RunningEffectDefinition HP_GAIN_PHYSICAL_FOR_CASTER_BASED_ON_TARGET;
    public static final RunningEffectDefinition INIT_GAIN_PERCENT_OF_VALUE;
    public static final RunningEffectDefinition INIT_LOSS_PERCENT_OF_VALUE;
    public static final RunningEffectDefinition MP_SET_TO_MAX;
    public static final RunningEffectDefinition PUSH;
    public static final RunningEffectDefinition PULL;
    public static final RunningEffectDefinition TELEPORT_CASTER;
    public static final RunningEffectDefinition ATTRACT_SIGHT;
    public static final RunningEffectDefinition STATE_APPLY;
    public static final RunningEffectDefinition GET_CLOSER;
    public static final RunningEffectDefinition PULL_ON_CASTER_BACK;
    public static final RunningEffectDefinition SUMMON;
    public static final RunningEffectDefinition SET_TRAP;
    public static final RunningEffectDefinition SPELL_REBOUND;
    public static final RunningEffectDefinition RUNNING_STATE;
    public static final RunningEffectDefinition SET_CADRAN;
    public static final RunningEffectDefinition SET_HOUR;
    public static final RunningEffectDefinition SET_BEACON;
    public static final RunningEffectDefinition SET_AURA;
    public static final RunningEffectDefinition SET_GLYPH;
    public static final RunningEffectDefinition UNSET_AURAS;
    public static final RunningEffectDefinition SET_BOMB;
    public static final RunningEffectDefinition SEDUCE_MONSTER;
    public static final RunningEffectDefinition STATE_FORCE_UNAPPLY;
    public static final RunningEffectDefinition SUMMON_SRAM_DOUBLE;
    public static final RunningEffectDefinition BRING_BACK;
    public static final RunningEffectDefinition SUMMON_FROM_SYMBIOT;
    public static final RunningEffectDefinition SET_AI;
    public static final RunningEffectDefinition WEAPONATTACK;
    public static final RunningEffectDefinition AI_GIVE_ORDER;
    public static final RunningEffectDefinition AI_GIVE_ORDER_CELL;
    public static final RunningEffectDefinition RUNNING_EFFECT_GROUP;
    public static final RunningEffectDefinition REPELL;
    public static final RunningEffectDefinition UNSUMMON;
    public static final RunningEffectDefinition THROW;
    public static final RunningEffectDefinition CARRY;
    public static final RunningEffectDefinition UPDATE_MAX_SEDUCABLE_CREATURES;
    public static final RunningEffectDefinition SET_AURA_ON_TARGET;
    public static final RunningEffectDefinition SET_EFFECT_AREA;
    public static final RunningEffectDefinition TELEPORT_TARGET;
    public static final RunningEffectDefinition RANDOM_RUNNING_EFFECT_GROUP;
    public static final RunningEffectDefinition MAKE_FLEE;
    public static final RunningEffectDefinition APPLY_STATE_FUNCTION_PA_PM_PW;
    public static final RunningEffectDefinition SPELL_BREAK;
    public static final RunningEffectDefinition RUNNING_EFFECT_GROUP_RANDOM_TARGETS;
    public static final RunningEffectDefinition APPLY_DEATHTAG;
    public static final RunningEffectDefinition SUMMON_IMAGE;
    public static final RunningEffectDefinition SET_AREA_WITH_LEVEL_FUNCTION_SPELL;
    public static final RunningEffectDefinition EFFECT_RANDOM_IN_AREA;
    public static final RunningEffectDefinition APPLY_STATE_WITHOUT_NOTIFICATION;
    public static final RunningEffectDefinition STATE_DECURSE_WITHOUT_NOTIFICATION;
    public static final RunningEffectDefinition APPLY_STATE_FUNCTION_ACTION_COST;
    public static final RunningEffectDefinition APPLY_STATE_FOR_FECA_ARMOR;
    public static final RunningEffectDefinition REMOVE_FECA_ARMOR;
    public static final RunningEffectDefinition SET_FECA_GLYPH;
    public static final RunningEffectDefinition XELORS_DIAL_CHARGE_GAIN;
    public static final RunningEffectDefinition XELORS_DIAL_CHARGE_LOSS;
    public static final RunningEffectDefinition SET_AI_WITH_SPELLS_FOR_IA_SERVER;
    public static final RunningEffectDefinition NULL_EFFECT;
    public static final RunningEffectDefinition SPLIT_TRIGGER_EFFECT;
    public static final RunningEffectDefinition NULL_EFFECT_ON_CELL;
    public static final RunningEffectDefinition NULL_EFFECT_NOTIFIED_TO_AI;
    public static final RunningEffectDefinition HP_LOSS_IN_PERCENT_MAX;
    public static final RunningEffectDefinition HP_FIRE_LOSS_IN_PERCENT_MAX;
    public static final RunningEffectDefinition HP_EARTH_LOSS_IN_PERCENT_MAX;
    public static final RunningEffectDefinition HP_WATER_LOSS_IN_PERCENT_MAX;
    public static final RunningEffectDefinition HP_AIR_LOSS_IN_PERCENT_MAX;
    public static final RunningEffectDefinition HP_LOSS_IN_PERCENT_CURRENT;
    public static final RunningEffectDefinition HP_FIRE_LOSS_IN_PERCENT_CURRENT;
    public static final RunningEffectDefinition HP_EARTH_LOSS_IN_PERCENT_CURRENT;
    public static final RunningEffectDefinition HP_WATER_LOSS_IN_PERCENT_CURRENT;
    public static final RunningEffectDefinition HP_AIR_LOSS_IN_PERCENT_CURRENT;
    public static final RunningEffectDefinition DECURSE;
    public static final RunningEffectDefinition EXCHANGE_POSITION;
    public static final RunningEffectDefinition SPELL_ATTACK;
    public static final RunningEffectDefinition UPDATE_VALUE;
    public static final RunningEffectDefinition KAMA_STEAL;
    public static final RunningEffectDefinition PICK_UP_ITEM;
    public static final RunningEffectDefinition BOOST_SKILL_WITH_SPELL;
    public static final RunningEffectDefinition KAMA_SHIELD;
    public static final RunningEffectDefinition UPDATE_TARGET_WITH_CARRIER;
    public static final RunningEffectDefinition VIRTUAL_ARMOR;
    public static final RunningEffectDefinition REVEAL_INVISIBILITY;
    public static final RunningEffectDefinition POISON_AP;
    public static final RunningEffectDefinition POISON_MP;
    public static final RunningEffectDefinition POISON_WP;
    public static final RunningEffectDefinition UPDATE_CASTER_WITH_TARGET;
    public static final RunningEffectDefinition CONFUSED;
    public static final RunningEffectDefinition IMMUNE_TO_EFFECTS;
    public static final RunningEffectDefinition REMOVE_FIGHT_PROPERTY;
    public static final RunningEffectDefinition APPLY_FIGHT_PROPERTY;
    public static final RunningEffectDefinition POISON_TRIGERRING_VALUE;
    public static final RunningEffectDefinition APPLY_WORLD_PROPERTY;
    public static final RunningEffectDefinition PLAY_EMOTE;
    public static final RunningEffectDefinition CHARAC_SET_DMG_AIR;
    public static final RunningEffectDefinition CHARAC_SET_DMG_EARTH;
    public static final RunningEffectDefinition CHARAC_SET_DMG_WATER;
    public static final RunningEffectDefinition CHARAC_SET_DMG_FIRE;
    public static final RunningEffectDefinition HEAL_BOOST_PERCENT_FUNCTION_DMG_BONUS;
    public static final RunningEffectDefinition HP_BOOST_FUNCTION_DMG_BONUS;
    public static final RunningEffectDefinition CHARAC_SET_DMG_IN_PERCENT;
    public static final RunningEffectDefinition SET_OUT_FIGHT_HP_REGEN;
    public static final RunningEffectDefinition CHARAC_SET_RES_AIR;
    public static final RunningEffectDefinition CHARAC_SET_RES_EARTH;
    public static final RunningEffectDefinition CHARAC_SET_RES_WATER;
    public static final RunningEffectDefinition CHARAC_SET_RES_FIRE;
    public static final RunningEffectDefinition CHARAC_SET_RES_IN_PERCENT;
    public static final RunningEffectDefinition CHARAC_SET_HEAL_IN_PERCENT;
    public static final RunningEffectDefinition CHARAC_SET_HP;
    public static final RunningEffectDefinition CHARAC_SET_AP_DBUFF_POWER;
    public static final RunningEffectDefinition HP_LOSS_IN_PERCENT_MAX_CASTER;
    public static final RunningEffectDefinition HP_FIRE_LOSS_IN_PERCENT_MAX_CASTER;
    public static final RunningEffectDefinition HP_EARTH_LOSS_IN_PERCENT_MAX_CASTER;
    public static final RunningEffectDefinition HP_WATER_LOSS_IN_PERCENT_MAX_CASTER;
    public static final RunningEffectDefinition HP_AIR_LOSS_IN_PERCENT_MAX_CASTER;
    public static final RunningEffectDefinition HP_LOSS_IN_PERCENT_CURRENT_CASTER;
    public static final RunningEffectDefinition HP_FIRE_LOSS_IN_PERCENT_CURRENT_CASTER;
    public static final RunningEffectDefinition HP_EARTH_LOSS_IN_PERCENT_CURRENT_CASTER;
    public static final RunningEffectDefinition HP_WATER_LOSS_IN_PERCENT_CURRENT_CASTER;
    public static final RunningEffectDefinition HP_AIR_LOSS_IN_PERCENT_CURRENT_CASTER;
    public static final RunningEffectDefinition HP_LOSS_IN_PERCENT_CURRENT_CASTER_LIFE_LOST;
    public static final RunningEffectDefinition HP_FIRE_LOSS_IN_PERCENT_CURRENT_CASTER_LIFE_LOST;
    public static final RunningEffectDefinition HP_EARTH_LOSS_IN_PERCENT_CURRENT_CASTER_LIFE_LOST;
    public static final RunningEffectDefinition HP_WATER_LOSS_IN_PERCENT_CURRENT_CASTER_LIFE_LOST;
    public static final RunningEffectDefinition HP_AIR_LOSS_IN_PERCENT_CURRENT_CASTER_LIFE_LOST;
    public static final RunningEffectDefinition RANDOM_HP_AIR_LOSS;
    public static final RunningEffectDefinition RANDOM_HP_EARTH_LOSS;
    public static final RunningEffectDefinition RANDOM_HP_FIRE_LOSS;
    public static final RunningEffectDefinition RANDOM_HP_WATER_LOSS;
    public static final RunningEffectDefinition HP_LOSS_FUNCTION_PA_PM;
    public static final RunningEffectDefinition ADD_SPELL_TO_INVENTORY;
    public static final RunningEffectDefinition INIT_LOSS_FUNCTION_PA_PM;
    public static final RunningEffectDefinition HP_LOSS_IN_PERCENT_CURRENT_TARGET_LIFE_LOST;
    public static final RunningEffectDefinition HP_FIRE_LOSS_IN_PERCENT_CURRENT_TARGET_LIFE_LOST;
    public static final RunningEffectDefinition HP_EARTH_LOSS_IN_PERCENT_CURRENT_TARGET_LIFE_LOST;
    public static final RunningEffectDefinition HP_WATER_LOSS_IN_PERCENT_CURRENT_TARGET_LIFE_LOST;
    public static final RunningEffectDefinition HP_AIR_LOSS_IN_PERCENT_CURRENT_TARGET_LIFE_LOST;
    public static final RunningEffectDefinition HP_LOSS_FUNCTION_PA_PM_WITHOUT_CONSUME_EARTH;
    public static final RunningEffectDefinition HP_LOSS_FUNCTION_PA_PM_WITHOUT_CONSUME_FIRE;
    public static final RunningEffectDefinition RESOURCEFULNESS_GAIN;
    public static final RunningEffectDefinition CRAFT_QUICKNESS_GAIN;
    public static final RunningEffectDefinition QUICK_LEARNER_HARVEST_GAIN;
    public static final RunningEffectDefinition QUICK_LEARNER_CRAFT_GAIN;
    public static final RunningEffectDefinition GREEN_THUMBS_GAIN;
    public static final RunningEffectDefinition ECOSYSTEM_SKILL_MODIFICATION;
    public static final RunningEffectDefinition CRAFT_SKILL_MODIFICATION;
    public static final RunningEffectDefinition RESOURCEFULNESS_LOSS;
    public static final RunningEffectDefinition GET_TITLE;
    public static final RunningEffectDefinition HP_LOSS_AND_PUPPET_HEAL;
    public static final RunningEffectDefinition LINK_CASTER_AND_TARGET;
    public static final RunningEffectDefinition CHANGE_SPELL_TARGET_CELL;
    public static final RunningEffectDefinition SET_CHANGE_SPELL_TARGET_CELL_AREA;
    public static final RunningEffectDefinition ENUTROF_DEPOSIT_PLACEMENT;
    public static final RunningEffectDefinition REMOVE_OWN_DEPOSIT;
    public static final RunningEffectDefinition AP_AS_MP;
    public static final RunningEffectDefinition FAKE_KO;
    public static final RunningEffectDefinition HP_LOSS_NORMAL_DISTRIB_EARTH;
    public static final RunningEffectDefinition CHARAC_GAIN_BASED_ON_OTHER_CHARAC_VALUE;
    public static final RunningEffectDefinition SET_LOOT_EFFECT_AREA;
    public static final RunningEffectDefinition DROP_FROM_LOOT_AREA;
    public static final RunningEffectDefinition HP_LOSS_FROM_LOOT_AREA;
    public static final RunningEffectDefinition COLLECT_FOR_CONTROLLER;
    public static final RunningEffectDefinition REPLACE_AREA_BY_ANOTHER;
    public static final RunningEffectDefinition HP_LOSS_FUNCTION_LOOT;
    public static final RunningEffectDefinition CHRAGE_BUFF;
    public static final RunningEffectDefinition HP_LOSS_AFTER_MOVEMENT;
    public static final RunningEffectDefinition DROP_FOR_ENUTROF_BLESSING;
    public static final RunningEffectDefinition INSTANT_KO;
    public static final RunningEffectDefinition BLITZKRIEK_EFFECT;
    public static final RunningEffectDefinition ELEMENT_SPELL_GAIN;
    public static final RunningEffectDefinition DOUBLE_OR_QUITS;
    public static final RunningEffectDefinition BOOST_VOODOOL_DMG;
    public static final RunningEffectDefinition VOODOOL_SPLIT_EFFECT;
    public static final RunningEffectDefinition VOODOOL_BOOST_EFFECT;
    public static final RunningEffectDefinition HP_GAIN_RANDOM_PERCENT_OF_VALUE;
    public static final RunningEffectDefinition SUMMONING_MASTERY;
    public static final RunningEffectDefinition SUMMON_DOUBLE_FOR_BELLAPHONE;
    public static final RunningEffectDefinition BOMB_COOLDOWN_DECREASE;
    public static final RunningEffectDefinition BOMB_COOLDOWN_BUFF;
    public static final RunningEffectDefinition SET_BARREL;
    public static final RunningEffectDefinition REMOVE_AREA_USING_TARGET;
    public static final RunningEffectDefinition RUNNING_EFFECT_GROUP_LEVEL_FUNCTION_STATE;
    public static final RunningEffectDefinition STATE_GENERIC_APPLICATION_BONUS;
    public static final RunningEffectDefinition STATE_RESISTANCE_BONUS;
    public static final RunningEffectDefinition HP_LOSS_THEN_HP_LOSS_FUNCTION_PREVIOUS_VALUE_EARTH;
    public static final RunningEffectDefinition ARMOR_PLATE_BONUS_GAIN;
    public static final RunningEffectDefinition FECA_GLYPH_CHARGE_BONUS_GAIN;
    public static final RunningEffectDefinition HP_LOSS_FUNCTION_CHARAC;
    public static final RunningEffectDefinition INVERT_DMG_AND_RES;
    public static final RunningEffectDefinition HP_LOSS_FUNCTION_TRIGGERING_VALUE;
    public static final RunningEffectDefinition APPLY_CANT_BE_PUSH_OR_PULLED;
    public static final RunningEffectDefinition RUNNING_EFFECT_GROUP_WITH_AT_LEAST_NULL_EFFECT;
    public static final RunningEffectDefinition PM_TRANSFER_TO_TARGETS;
    public static final RunningEffectDefinition TACKLE_TRANSFER_TO_TARGETS;
    public static final RunningEffectDefinition DODGE_TRANSFER_TO_TARGETS;
    public static final RunningEffectDefinition BRING_BACK_TO_OWNER_SYMBIOT;
    public static final RunningEffectDefinition CHANGE_LEVEL;
    public static final RunningEffectDefinition OSA_INIT_GAIN;
    public static final RunningEffectDefinition OSA_CC_GAIN;
    public static final RunningEffectDefinition OSA_DODGE_GAIN;
    public static final RunningEffectDefinition OSA_TACKLE_GAIN;
    public static final RunningEffectDefinition GROUP_SECOND_VALUE_FUNCTION_FIRST;
    public static final RunningEffectDefinition PERCEPTION_GAIN;
    public static final RunningEffectDefinition PERCEPTION_LOSS;
    public static final RunningEffectDefinition FINAL_DMG_GAIN_FUNCTION_STATE_LEVEL;
    public static final RunningEffectDefinition OSA_DMG_GAIN;
    public static final RunningEffectDefinition OSA_AP_GAIN;
    public static final RunningEffectDefinition OSA_MP_GAIN;
    public static final RunningEffectDefinition WILLPOWER_GAIN;
    public static final RunningEffectDefinition WILLPOWER_LOSS;
    public static final RunningEffectDefinition OSA_RANGE_GAIN;
    public static final RunningEffectDefinition BLOCK_GAIN;
    public static final RunningEffectDefinition BLOCK_LOSS;
    public static final RunningEffectDefinition HP_MIN_MODIFICATION;
    public static final RunningEffectDefinition MOVE_AWAY_FROM_CELL;
    public static final RunningEffectDefinition VIRTUAL_ARMOR_BONUS_GAIN;
    public static final RunningEffectDefinition AREA_HP_LOSS;
    public static final RunningEffectDefinition EFFECT_VALUE_FUNCTION_FECA_ARMOR;
    public static final RunningEffectDefinition EFFECT_VALUE_FUNCTION_GLYPH_CHARGE;
    public static final RunningEffectDefinition RES_AP_LOSS;
    public static final RunningEffectDefinition RES_MP_LOSS;
    public static final RunningEffectDefinition RUNNING_EFFECT_GROUP_PROBA_FUNCTION_PA_PM_PW;
    public static final RunningEffectDefinition EFFECT_PROBA_FUNCTION_GLYPH_CHARGE;
    public static final RunningEffectDefinition EFFECT_PROBA_FUNCTION_ARMOR_PLATE;
    public static final RunningEffectDefinition MODIFY_SUB_EFFECT_BY_CHRAGE;
    public static final RunningEffectDefinition MODIFY_SUB_EFFECT_BY_TARGET_PLATE;
    public static final RunningEffectDefinition RANDOM_IN_AREA_BY_AREA_HP;
    public static final RunningEffectDefinition APPLY_STATE_PERCENT_FUNCTION_AREA_HP;
    public static final RunningEffectDefinition DMG_WATER_MODIFIED_BY_ARMOR_PLATE;
    public static final RunningEffectDefinition DMG_AIR_MODIFIED_BY_ARMOR_PLATE;
    public static final RunningEffectDefinition DMG_EARTH_MODIFIED_BY_ARMOR_PLATE;
    public static final RunningEffectDefinition DMG_FIRE_MODIFIED_BY_ARMOR_PLATE;
    public static final RunningEffectDefinition RUNNING_EFFECT_GROUP_PROBA_FUNCTION_STATE_LEVEL;
    public static final RunningEffectDefinition MODIFY_SUB_EFFECT_BY_ARMOR_PLATE;
    public static final RunningEffectDefinition REG_EXECUTION_COUNT_FUNCTION_AREA_HP;
    public static final RunningEffectDefinition AREA_HP_BUFF;
    public static final RunningEffectDefinition MODIFY_DMG_IN_PERCENT_FUNTION_PROSPECTION;
    public static final RunningEffectDefinition REPLACE_AREA_BY_ANOTHER_USING_TARGET;
    public static final RunningEffectDefinition RUNNING_EFFECT_GROUP_LEVEL_FUNCTION_TRIGGERING_SPELL_COST;
    public static final RunningEffectDefinition REMOVE_AREA_USING_TARGET_CELL;
    public static final RunningEffectDefinition RUNNING_EFFECT_GROUP_LEVEL_FUNCTION_TRIGGERING_ACTION_COST;
    public static final RunningEffectDefinition RUNNING_EFFECT_GROUP_LEVEL_FUNCTION_CHARACTERISTIC;
    public static final RunningEffectDefinition BOMB_COOLDOWN_LOSS_FUNCTION_PA_PM;
    public static final RunningEffectDefinition EXECUTE_TRIGGER_IN_EFFECT_ZONE;
    public static final RunningEffectDefinition MODIFY_DMG_IN_PERCENT_FUNCTION_INITIATIVE;
    public static final RunningEffectDefinition HP_STASIS_LOSS;
    public static final RunningEffectDefinition DMG_STASIS_GAIN_PERCENT;
    public static final RunningEffectDefinition ROLLBACK_TRIGGERING_SPELL_AP_COST;
    public static final RunningEffectDefinition ROLLBACK_TRIGGERING_SPELL_MP_COST;
    public static final RunningEffectDefinition ROLLBACK_TRIGGERING_SPELL_WP_COST;
    public static final RunningEffectDefinition HP_LOSS_PERCENT_OF_VALUE;
    public static final RunningEffectDefinition EXECUTE_ACTION_COST;
    public static final RunningEffectDefinition CHARAC_SET_AREA_HP;
    public static final RunningEffectDefinition AREA_HP_GAIN;
    public static final RunningEffectDefinition INIT_BOOST;
    public static final RunningEffectDefinition RES_STASIS_LOSS_PERCENT;
    public static final RunningEffectDefinition CHARAC_BUFF_BASED_ON_OTHER_CHARAC_VALUE;
    public static final RunningEffectDefinition CHARAC_SET_AP;
    public static final RunningEffectDefinition CHARAC_SET_INIT;
    public static final RunningEffectDefinition REPLACE_TARGET_BY_OWNER;
    public static final RunningEffectDefinition DECURSE_LINKED_TO_CASTER;
    public static final RunningEffectDefinition CHANGE_PLAYER_SPELLS_BY_MONSTER_ONES;
    public static final RunningEffectDefinition EXCLUDE_FROM_FIGHT;
    public static final RunningEffectDefinition REMOVE_ALL_AREAS_WITH_ID;
    public static final RunningEffectDefinition SPAWN_MONSTER;
    public static final RunningEffectDefinition REMOVE_FROM_FIGHT_MAP;
    public static final RunningEffectDefinition REG_EXECUTION_COUNT_FUNCTION_TRIGGERING_ACTION_COST;
    public static final RunningEffectDefinition HP_LOSS_STASIS_EXPONENTIAL_GROWTH;
    public static final RunningEffectDefinition HP_LOSS_FIRE_EXPONENTIAL_GROWTH;
    public static final RunningEffectDefinition HP_LOSS_EARTH_EXPONENTIAL_GROWTH;
    public static final RunningEffectDefinition HP_LOSS_AIR_EXPONENTIAL_GROWTH;
    public static final RunningEffectDefinition HP_LOSS_WATER_EXPONENTIAL_GROWTH;
    public static final RunningEffectDefinition RES_WATER_MODIFIED_BY_ARMOR_PLATE;
    public static final RunningEffectDefinition RES_AIR_MODIFIED_BY_ARMOR_PLATE;
    public static final RunningEffectDefinition RES_EARTH_MODIFIED_BY_ARMOR_PLATE;
    public static final RunningEffectDefinition RES_FIRE_MODIFIED_BY_ARMOR_PLATE;
    public static final RunningEffectDefinition SET_CHRAGE_TO_DMG_RATIO;
    public static final RunningEffectDefinition REG_EXECUTION_COUNT_FIXED;
    public static final RunningEffectDefinition SET_AP;
    public static final RunningEffectDefinition SET_MP;
    public static final RunningEffectDefinition SET_WP;
    public static final RunningEffectDefinition DEBUFF_FUMBLE_RATE;
    public static final RunningEffectDefinition SET_MICROBOT_RAILS_MAX_DISTANCE;
    public static final RunningEffectDefinition VIRTUAL_HP_BOOST_IN_PERCENT_FUNCTION_ALLIES_COUNT;
    public static final RunningEffectDefinition VIRTUAL_HP_BOOST_IN_PERCENT;
    public static final RunningEffectDefinition SET_VIRTUAL_HP_FROM_HP;
    public static final RunningEffectDefinition HP_LOSS_IN_PERCENT_MAX_WITH_VIRTUAL;
    public static final RunningEffectDefinition HP_LOSS_IN_PERCENT_MAX_CASTER_WITH_VIRTUAL;
    public static final RunningEffectDefinition HP_LOSS_FIRE_FUNCTION_FIGHTER_LEVEL;
    public static final RunningEffectDefinition HP_LOSS_EARTH_FUNCTION_FIGHTER_LEVEL;
    public static final RunningEffectDefinition HP_LOSS_WATER_FUNCTION_FIGHTER_LEVEL;
    public static final RunningEffectDefinition HP_LOSS_AIR_FUNCTION_FIGHTER_LEVEL;
    public static final RunningEffectDefinition HP_LOSS_STASIS_FUNCTION_FIGHTER_LEVEL;
    public static final RunningEffectDefinition ADD_SPELL_TO_TEMPORARY_SPELL_INVENTORY;
    public static final RunningEffectDefinition PLANTATION_BONUS_PLANT;
    public static final RunningEffectDefinition PLANTATION_BONUS_TREE;
    public static final RunningEffectDefinition PLANTATION_BONUS_CULTIVATION;
    public static final RunningEffectDefinition PLANTATION_BONUS_MOB;
    public static final RunningEffectDefinition CRAFT_CRAFT_XP_BONUS;
    public static final RunningEffectDefinition COLLECT_BONUS_PLANT;
    public static final RunningEffectDefinition COLLECT_BONUS_TREE;
    public static final RunningEffectDefinition COLLECT_BONUS_CULTIVATION;
    public static final RunningEffectDefinition COLLECT_BONUS_MOB;
    public static final RunningEffectDefinition COLLECT_BONUS_MINERAL;
    public static final RunningEffectDefinition COLLECT_BONUS_FISH;
    public static final RunningEffectDefinition CRAFT_QUICKNESS_BONUS;
    public static final RunningEffectDefinition PLANTATION_BONUS_TREASURE;
    public static final RunningEffectDefinition ALL_ELEMENTAL_SPELL_GAIN;
    public static final RunningEffectDefinition PASSIVE_SPELL_GAIN;
    public static final RunningEffectDefinition ACTIVE_SUPPORT_SPELL_GAIN;
    public static final RunningEffectDefinition REMOVE_PASSIVE_SPELLS;
    public static final RunningEffectDefinition AP_SET_TO_MAX;
    public static final RunningEffectDefinition SET_VITUAL_HP;
    public static final RunningEffectDefinition VIRTUAL_HP_SET_TO_MAX;
    public static final RunningEffectDefinition UPDATE_HP_MAX_PERCENT_MODIFIER;
    public static final RunningEffectDefinition ADD_BONUS_LOOT;
    public static final RunningEffectDefinition CRITICAL_RES_GAIN;
    public static final RunningEffectDefinition UPDATE_VIRTUAL_HP_MAX_PERCENT_MODIFIER;
    public static final RunningEffectDefinition HP_GAIN_FOR_UNDEAD;
    public static final RunningEffectDefinition KO_TIME_BEFORE_DEATH_BUFF;
    public static final RunningEffectDefinition TELEPORT_CASTER_BEHIND_TARGET;
    public static final RunningEffectDefinition CHANGE_SPELL_TARGET_CELL_BY_CASTER_CELL;
    public static final RunningEffectDefinition SUMMON_DOUBLE_FOR_ICE_STATUE;
    public static final RunningEffectDefinition RUNNING_EFFECT_GROUP_LEVEL_FUNCTION_SPELL;
    public static final RunningEffectDefinition OSA_INVOCATION_KNOWLEDGE_GAIN;
    public static final RunningEffectDefinition VIRTUAL_ARMOR_FLAT;
    public static final RunningEffectDefinition DMG_WATER_PERCENT_GAIN_FCT_CASTER_DMG_EARTH_PERCENT;
    public static final RunningEffectDefinition RUNNING_EFFECT_GROUP_LEVEL_FUNCTION_CHARACTER_LEVEL;
    public static final RunningEffectDefinition CHANGE_TRIGERRING_EFFECT_TARGET;
    public static final RunningEffectDefinition COPY_CHARAC_AT_APPLICATION_VALUE;
    public static final RunningEffectDefinition SUMMON_ZOBAL_DOUBLE;
    public static final RunningEffectDefinition KO_TIME_BEFORE_DEATH_MIN_MODIFICATION;
    public static final RunningEffectDefinition MODIFY_DMG_IN_PERCENT_FUNCTION_DODGE;
    public static final RunningEffectDefinition APPLY_STATE_CAPED_BY_ANOTHER_STATE;
    public static final RunningEffectDefinition REG_SUB_EFFECT_VALUE_FUNCTION_CASTER_AP;
    public static final RunningEffectDefinition REG_SUB_EFFECT_VALUE_FUNCTION_CASTER_MP;
    public static final RunningEffectDefinition SET_EFFECT_AREA_FOR_ORIGINAL_CONTROLLER;
    public static final RunningEffectDefinition MODIFY_HEAL_BONUS_IN_PERCENT_FUNCTION_DODGE;
    public static final RunningEffectDefinition ARMOR_GAIN;
    public static final RunningEffectDefinition ARMOR_LOSS;
    public static final RunningEffectDefinition ARMOR_ELEMENTAL_GAIN;
    public static final RunningEffectDefinition REDUCE_ZONE_EFFECT;
    public static final RunningEffectDefinition COPY_CHARAC_IN_REAL_TIME;
    public static final RunningEffectDefinition BEST_ELEMENT_HP_LOSS;
    public static final RunningEffectDefinition BEST_ELEMENT_HP_GAIN;
    public static final RunningEffectDefinition BEST_ELEMENT_HP_GAIN_FUNCTION_PA_PM;
    public static final RunningEffectDefinition SPECIFIC_FOR_ARMOR_DAMAGE_REBOUND;
    public static final RunningEffectDefinition PVP_BUFF_GAIN;
    public static final RunningEffectDefinition RUNNING_EFFECT_GROUP_LEVEL_FUNCTION_TRIGGERING_VALUE;
    public static final RunningEffectDefinition REMOVE_BLOCKING_AREA_USING_TARGET;
    public static final RunningEffectDefinition CRAFT_ECOSYSTEM_XP_BONUS;
    public static final RunningEffectDefinition CRAFT_XP_BONUS;
    public static final RunningEffectDefinition STATE_DECURSE_FOR_HYPERACTION;
    public static final RunningEffectDefinition HP_GAIN_FUNCTION_CASTER_EARTH;
    public static final RunningEffectDefinition HP_GAIN_FUNCTION_CASTER_AIR;
    public static final RunningEffectDefinition HP_GAIN_FUNCTION_CASTER_WATER;
    public static final RunningEffectDefinition HP_GAIN_FUNCTION_CASTER_FIRE;
    public static final RunningEffectDefinition HP_GAIN_FUNCTION_CASTER_PHYSICAL;
    public static final RunningEffectDefinition SET_TEAM_ID;
    public static final RunningEffectDefinition REMOVE_EQUIPMENT_EFFECTS;
    public static final RunningEffectDefinition REMOVE_SET_EFFECTS;
    public static final RunningEffectDefinition SET_STEAMER_BLOCK;
    public static final RunningEffectDefinition STEAMER_BLOCK_PASSIVE_RESIST;
    public static final RunningEffectDefinition STEAMER_BLOCK_DAMAGE_REDIRECTION;
    public static final RunningEffectDefinition WEAKEST_RESIST_GAIN;
    public static final RunningEffectDefinition STEAMER_DAMAGE_REDIRECTION;
    public static final RunningEffectDefinition ADD_CHARAC_VALUE_TO_ANOTHER_IN_REAL_TIME;
    public static final RunningEffectDefinition CHARAC_SET_LEADERSHIP;
    public static final RunningEffectDefinition SET_RESISTANCE_TARGET;
    public static final RunningEffectDefinition REG_EXECUTION_COUNT_FUNCTION_ALLIES_COUNT;
    public static final RunningEffectDefinition BARRIER_ELEMENTAL_GAIN;
    public static final RunningEffectDefinition UPDATE_TACKLE_HP_MAX_PERCENT_MODIFIER;
    public static final RunningEffectDefinition CHANGE_AREA_POSITION;
    public static final RunningEffectDefinition MODIFY_RES_IN_PERCENT_FUNCTION_TACKLE;
    public static final RunningEffectDefinition ADD_TO_AI_PRIORITY_TARGETS;
    public static final RunningEffectDefinition RUNNING_EFFECT_GROUP_LEVEL_FUNCTION_TOTAL_HP;
    public static final RunningEffectDefinition DIVIDE_HP_LOSS_UNLESS_THRESHOLD;
    public static final RunningEffectDefinition SWITCH_CHARAC_VALUES;
    public static final RunningEffectDefinition AOE_DMG_GAIN;
    public static final RunningEffectDefinition SINGLE_TARGET_DMG_GAIN;
    public static final RunningEffectDefinition MELEE_DMG_GAIN;
    public static final RunningEffectDefinition RANGED_DMG_GAIN;
    public static final RunningEffectDefinition NON_CRIT_DMG_GAIN;
    public static final RunningEffectDefinition BERSERK_DMG_GAIN;
    public static final RunningEffectDefinition CRITICAL_BONUS_LOSS;
    public static final RunningEffectDefinition SINGLE_TARGET_DMG_LOSS;
    public static final RunningEffectDefinition AOE_DMG_LOSS;
    public static final RunningEffectDefinition MELEE_DMG_LOSS;
    public static final RunningEffectDefinition RANGED_DMG_LOSS;
    public static final RunningEffectDefinition BERSERK_DMG_LOSS;
    public static final RunningEffectDefinition CRITICAL_RES_LOSS;
    public static final RunningEffectDefinition RES_BACKSTAB_LOSS;
    public static final RunningEffectDefinition LEADERSHIP_LOSS;
    public static final RunningEffectDefinition SPELL_WITH_PROPERTY_AP_COST_REDUCTION;
    public static final RunningEffectDefinition SPELL_WITH_PROPERTY_RANGE_GAIN;
    public static final RunningEffectDefinition TACKLE_ACTION_COST;
    public static final RunningEffectDefinition VARIABLE_ELEMENTS_DAMAGE_GAIN;
    public static final RunningEffectDefinition VARIABLE_ELEMENTS_RES_GAIN;
    public static final RunningEffectDefinition ADD_CHARAC_VALUE_TO_ANOTHER_IN_REAL_TIME_WITH_THRESHOLD;
    public static final RunningEffectDefinition VIRTUAL_HP_BOOST;
    public static final RunningEffectDefinition REVERSI_CHECK_FOR_REVERSABLE;
    
    public static RunningEffectConstants getInstance() {
        return RunningEffectConstants.m_instance;
    }
    
    static {
        m_instance = new RunningEffectConstants();
        VARIABLE_EFFECT = new RunningEffectDefinition(-1, new VariableEffect(), RunningEffectConstants.m_instance, -1, "Effet Variable", null);
        HP_LOSS = new RunningEffectDefinition(1, new HPLoss(Elements.PHYSICAL, HPLoss.ComputeMode.CLASSIC), RunningEffectConstants.m_instance, 1001, "Perte de PdV - non r\u00e9ductible!", RunningEffectStatus.NEGATIVE);
        HP_FIRE_LOSS = new RunningEffectDefinition(2, new HPLoss(Elements.FIRE, HPLoss.ComputeMode.CLASSIC), RunningEffectConstants.m_instance, 1001, "Perte de PdV - Feu", RunningEffectStatus.NEGATIVE);
        HP_EARTH_LOSS = new RunningEffectDefinition(3, new HPLoss(Elements.EARTH, HPLoss.ComputeMode.CLASSIC), RunningEffectConstants.m_instance, 1001, "Perte de PdV - Terre", RunningEffectStatus.NEGATIVE);
        HP_WATER_LOSS = new RunningEffectDefinition(4, new HPLoss(Elements.WATER, HPLoss.ComputeMode.CLASSIC), RunningEffectConstants.m_instance, 1001, "Perte de PdV - Eau", RunningEffectStatus.NEGATIVE);
        HP_AIR_LOSS = new RunningEffectDefinition(5, new HPLoss(Elements.AIR, HPLoss.ComputeMode.CLASSIC), RunningEffectConstants.m_instance, 1001, "Perte de PdV - Air", RunningEffectStatus.NEGATIVE);
        HP_LOSS_WITH_KAMAS_WATER = new RunningEffectDefinition(6, new HPKamas(Elements.WATER, HPLoss.ComputeMode.CLASSIC), RunningEffectConstants.m_instance, 1001, "Perte de PdV \u00e0 cause de Kamas - Eau", RunningEffectStatus.NEGATIVE);
        HP_LEECH = new RunningEffectDefinition(11, new HPLeech(Elements.PHYSICAL, HPLoss.ComputeMode.CLASSIC), RunningEffectConstants.m_instance, 1001, "Vol de Vie - non r\u00e9ductible", RunningEffectStatus.NEGATIVE);
        HP_LEECH_FIRE = new RunningEffectDefinition(12, new HPLeech(Elements.FIRE, HPLoss.ComputeMode.CLASSIC), RunningEffectConstants.m_instance, 1001, "Vol de Vie - Feu", RunningEffectStatus.NEGATIVE);
        HP_LEECH_EARTH = new RunningEffectDefinition(13, new HPLeech(Elements.EARTH, HPLoss.ComputeMode.CLASSIC), RunningEffectConstants.m_instance, 1001, "Vol de Vie - Terre", RunningEffectStatus.NEGATIVE);
        HP_LEECH_WATER = new RunningEffectDefinition(14, new HPLeech(Elements.WATER, HPLoss.ComputeMode.CLASSIC), RunningEffectConstants.m_instance, 1001, "Vol de Vie - Eau", RunningEffectStatus.NEGATIVE);
        HP_LEECH_AIR = new RunningEffectDefinition(15, new HPLeech(Elements.AIR, HPLoss.ComputeMode.CLASSIC), RunningEffectConstants.m_instance, 1001, "Vol de Vie - Air", RunningEffectStatus.NEGATIVE);
        SET_HP = new RunningEffectDefinition(16, new SetCharac(FighterCharacteristicType.HP), RunningEffectConstants.m_instance, -1, "Force la valeur des PdV", RunningEffectStatus.POSITIVE);
        HP_GAIN_WITH_FEEDBACK = new RunningEffectDefinition(17, new HPGainWithFeedBack(Elements.PHYSICAL), RunningEffectConstants.m_instance, 1013, "Don de PdV", RunningEffectStatus.POSITIVE);
        HP_BOOST = new RunningEffectDefinition(20, new CharacBuff(FighterCharacteristicType.HP), RunningEffectConstants.m_instance, -1, "Boost de PdV", RunningEffectStatus.POSITIVE);
        HP_DEBOOST = new RunningEffectDefinition(21, new CharacDebuff(FighterCharacteristicType.HP), RunningEffectConstants.m_instance, 1001, "DeBoost de PdV", RunningEffectStatus.NEGATIVE);
        HP_LOSS_ACCUMULATION = new RunningEffectDefinition(23, new HpLossAccumulation(), RunningEffectConstants.m_instance, -1, "Accumulation des pertes de PdV", RunningEffectStatus.POSITIVE);
        COPY_CHARAC_MAX = new RunningEffectDefinition(24, new CopyCharacMax(), RunningEffectConstants.m_instance, -1, "Copie le Max d'une charac", RunningEffectStatus.NEUTRAL);
        HP_GAIN = new RunningEffectDefinition(25, new HPGain(Elements.PHYSICAL), RunningEffectConstants.m_instance, 1002, "Soin", RunningEffectStatus.POSITIVE);
        HEAL_GAIN = new RunningEffectDefinition(26, new CharacGain(FighterCharacteristicType.HEAL_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Boost des Soins", RunningEffectStatus.POSITIVE);
        HEAL_LOSS = new RunningEffectDefinition(27, new CharacLoss(FighterCharacteristicType.HEAL_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Deboost des Soins", RunningEffectStatus.NEGATIVE);
        DEATH = new RunningEffectDefinition(28, new Death(), RunningEffectConstants.m_instance, -1, "Mort instantan\u00e9e", RunningEffectStatus.NEGATIVE);
        HP_GAIN_PERCENT_OF_VALUE = new RunningEffectDefinition(29, new HPGainPercentOfValue(), RunningEffectConstants.m_instance, 1002, "Soins (%)", RunningEffectStatus.POSITIVE);
        ACTION_COST = new RunningEffectDefinition(30, new ActionCost(), RunningEffectConstants.m_instance, 1000, "Utilisation de PA (\u00e0 ne pas utiliser normalement)", RunningEffectStatus.NEGATIVE);
        AP_BOOST = new RunningEffectDefinition(31, new CharacBuff(FighterCharacteristicType.AP), RunningEffectConstants.m_instance, 1008, "Boost de PA", RunningEffectStatus.POSITIVE);
        AP_DEBOOST = new RunningEffectDefinition(32, new CharacDebuff(FighterCharacteristicType.AP), RunningEffectConstants.m_instance, 1007, "Deboost de PA", RunningEffectStatus.NEGATIVE);
        AP_GAIN = new RunningEffectDefinition(33, new CharacGain(FighterCharacteristicType.AP), RunningEffectConstants.m_instance, 1008, "Gain de PA (attention : gain != boost)", RunningEffectStatus.POSITIVE);
        AP_LEECH = new RunningEffectDefinition(35, new CharacLeech(FighterCharacteristicType.AP), RunningEffectConstants.m_instance, 1007, "Vol de PA (gain pour le caster, Debuff pour l'autre)", RunningEffectStatus.NEGATIVE);
        AP_GIFT = new RunningEffectDefinition(36, new CharacGift(FighterCharacteristicType.AP), RunningEffectConstants.m_instance, 1008, "Don de PA (debuff pour le caster, Buff pour l'autre)", RunningEffectStatus.NEGATIVE);
        AP_LOSS = new RunningEffectDefinition(37, new CharacLoss(FighterCharacteristicType.AP), RunningEffectConstants.m_instance, 1007, "Perte de PA (attention, perte != deboost)", RunningEffectStatus.NEGATIVE);
        RES_AP_GAIN = new RunningEffectDefinition(38, new CharacGain(FighterCharacteristicType.AP_DEBUFF_RES), RunningEffectConstants.m_instance, -1, "Gain de r\u00e9sistance au deboost de PA", RunningEffectStatus.POSITIVE);
        CHARAC_GAIN = new RunningEffectDefinition(39, new CharacGain(), RunningEffectConstants.m_instance, -1, "Gain de charac g\u00e9n\u00e9rique", RunningEffectStatus.POSITIVE);
        CHARAC_LOSS = new RunningEffectDefinition(40, new CharacLoss(), RunningEffectConstants.m_instance, -1, "Perte de charac g\u00e9n\u00e9rique", RunningEffectStatus.POSITIVE);
        MP_BOOST = new RunningEffectDefinition(41, new CharacBuff(FighterCharacteristicType.MP), RunningEffectConstants.m_instance, 1005, "Boost de PM", RunningEffectStatus.POSITIVE);
        MP_DEBOOST = new RunningEffectDefinition(42, new CharacDebuff(FighterCharacteristicType.MP), RunningEffectConstants.m_instance, 1004, "Deboost de PM", RunningEffectStatus.NEGATIVE);
        MP_GAIN = new RunningEffectDefinition(43, new CharacGain(FighterCharacteristicType.MP), RunningEffectConstants.m_instance, 1005, "Gain de PM (attention :gain != boost", RunningEffectStatus.POSITIVE);
        MP_LOSS = new RunningEffectDefinition(44, new CharacLoss(FighterCharacteristicType.MP), RunningEffectConstants.m_instance, 1004, "Perte de PM", RunningEffectStatus.NEGATIVE);
        MP_LEECH = new RunningEffectDefinition(45, new CharacLeech(FighterCharacteristicType.MP), RunningEffectConstants.m_instance, 1004, "Vol de PM", RunningEffectStatus.NEGATIVE);
        RES_MP_GAIN = new RunningEffectDefinition(46, new CharacGain(FighterCharacteristicType.MP_DEBUFF_RES), RunningEffectConstants.m_instance, -1, "Gain de r\u00e9sistance au deboost de PM", RunningEffectStatus.POSITIVE);
        SPELL_BOOST_LEVEL = new RunningEffectDefinition(47, new SpellGain(), RunningEffectConstants.m_instance, -1, "Gain de niveau de sort", RunningEffectStatus.POSITIVE);
        HP_LOSS_WITH_REBOUND = new RunningEffectDefinition(50, new HPLossEffectRebound(Elements.PHYSICAL, HPLoss.ComputeMode.CLASSIC), RunningEffectConstants.m_instance, -1, "Perte de PdV avec rebond (sous-effet 1 n\u00e9cessaire)", RunningEffectStatus.NEGATIVE);
        HP_EARTH_LOSS_WITH_REBOUND = new RunningEffectDefinition(51, new HPLossEffectRebound(Elements.EARTH, HPLoss.ComputeMode.CLASSIC), RunningEffectConstants.m_instance, -1, "Perte de PdV avec rebond - Terre (sous-effet 3 n\u00e9cessaire)", RunningEffectStatus.NEGATIVE);
        HP_FIRE_LOSS_WITH_REBOUND = new RunningEffectDefinition(52, new HPLossEffectRebound(Elements.FIRE, HPLoss.ComputeMode.CLASSIC), RunningEffectConstants.m_instance, -1, "Perte de PdV avec rebond - Feu (sous-effet 2 n\u00e9cessaire)", RunningEffectStatus.NEGATIVE);
        HP_WATER_LOSS_WITH_REBOUND = new RunningEffectDefinition(53, new HPLossEffectRebound(Elements.WATER, HPLoss.ComputeMode.CLASSIC), RunningEffectConstants.m_instance, -1, "Perte de PdV avec rebond - Eau (sous-effet 4 n\u00e9cessaire)", RunningEffectStatus.NEGATIVE);
        HP_AIR_LOSS_WITH_REBOUND = new RunningEffectDefinition(54, new HPLossEffectRebound(Elements.AIR, HPLoss.ComputeMode.CLASSIC), RunningEffectConstants.m_instance, -1, "Perte de PdV avec rebond - Air (sous-effet 5 n\u00e9cessaire)", RunningEffectStatus.NEGATIVE);
        HP_EXCHANGE = new RunningEffectDefinition(59, new HPExchangePercentOfValue(), RunningEffectConstants.m_instance, 1013, "Don de PdV (% de la vie max du caster)", RunningEffectStatus.NEGATIVE);
        HP_GAIN_WITH_REBOUND_WATER = new RunningEffectDefinition(60, new HPGainEffectRebound(Elements.WATER), RunningEffectConstants.m_instance, -1, "Gain de PdV avec rebond - Eau", RunningEffectStatus.POSITIVE);
        CHARAC_STEAL_WITH_LOSS = new RunningEffectDefinition(61, new CharacSteal(), RunningEffectConstants.m_instance, -1, "Vol de Charac (perte pour la cible)", RunningEffectStatus.NEGATIVE);
        AP_LEECH_IN_PERCENT = new RunningEffectDefinition(62, new CharacLeechInPercent(FighterCharacteristicType.AP), RunningEffectConstants.m_instance, 1007, "Vol de PA (en %)", RunningEffectStatus.NEGATIVE);
        WP_LEECH_IN_PERCENT = new RunningEffectDefinition(63, new CharacLeechInPercent(FighterCharacteristicType.WP), RunningEffectConstants.m_instance, 1007, "Vol de WP (gain pour le caster, Debuff pour l'autre)", RunningEffectStatus.NEGATIVE);
        DMG_LEECH_IN_PERCENT = new RunningEffectDefinition(64, new CharacLeech(FighterCharacteristicType.DMG_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Vol de D\u00e9gats (gain pour le caster, Debuff pour l'autre)", RunningEffectStatus.NEGATIVE);
        RES_LEECH_IN_PERCENT = new RunningEffectDefinition(65, new CharacLeech(FighterCharacteristicType.RES_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Vol de Resist (gain pour le caster, Debuff pour l'autre)", RunningEffectStatus.NEGATIVE);
        MP_LEECH_IN_PERCENT = new RunningEffectDefinition(66, new CharacLeechInPercent(FighterCharacteristicType.MP), RunningEffectConstants.m_instance, 1004, "Vol de PM (en %)", RunningEffectStatus.NEGATIVE);
        HP_GAIN_WITH_REBOUND_AIR = new RunningEffectDefinition(67, new HPGainEffectRebound(Elements.AIR), RunningEffectConstants.m_instance, -1, "Gain de PdV avec rebond - Air", RunningEffectStatus.POSITIVE);
        RES_HEAL_GAIN = new RunningEffectDefinition(70, new CharacGain(FighterCharacteristicType.RES_HEAL_PERCENT), RunningEffectConstants.m_instance, -1, "Gain de la r\u00e9sistance aux Soins (%)", RunningEffectStatus.NEGATIVE);
        RES_BACK_GAIN = new RunningEffectDefinition(71, new CharacGain(FighterCharacteristicType.RES_BACKSTAB), RunningEffectConstants.m_instance, -1, "Augmente la r\u00e9sistance aux d\u00e9gats pris de dos", RunningEffectStatus.POSITIVE);
        RES_HEAL_LOSS = new RunningEffectDefinition(72, new CharacLoss(FighterCharacteristicType.RES_HEAL_PERCENT), RunningEffectConstants.m_instance, -1, "Perte de la r\u00e9sistance aux Soins (%)", RunningEffectStatus.POSITIVE);
        WP_LEECH = new RunningEffectDefinition(73, new CharacLeech(FighterCharacteristicType.WP), RunningEffectConstants.m_instance, 1007, "Vol de WP (gain pour le caster, Debuff pour l'autre)", RunningEffectStatus.NEGATIVE);
        INIT_LEECH = new RunningEffectDefinition(74, new CharacLeech(FighterCharacteristicType.INIT), RunningEffectConstants.m_instance, -1, "Vol d'Initiative (gain pour le caster, Debuff pour l'autre)", RunningEffectStatus.NEGATIVE);
        RES_GAIN_IN_PERCENT = new RunningEffectDefinition(80, new CharacGain(FighterCharacteristicType.RES_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Gain de r\u00e9sistance \u00e0 tous les El\u00e9ments (%)", RunningEffectStatus.POSITIVE);
        RES_FIRE_GAIN_PERCENT = new RunningEffectDefinition(82, new CharacGain(FighterCharacteristicType.RES_FIRE_PERCENT), RunningEffectConstants.m_instance, -1, "Gain de la r\u00e9sistance Feu (%)", RunningEffectStatus.POSITIVE);
        RES_WATER_GAIN_PERCENT = new RunningEffectDefinition(83, new CharacGain(FighterCharacteristicType.RES_WATER_PERCENT), RunningEffectConstants.m_instance, -1, "Gain de la r\u00e9sistance Eau (%)", RunningEffectStatus.POSITIVE);
        RES_EARTH_GAIN_PERCENT = new RunningEffectDefinition(84, new CharacGain(FighterCharacteristicType.RES_EARTH_PERCENT), RunningEffectConstants.m_instance, -1, "Gain de la r\u00e9sistance Terre (%)", RunningEffectStatus.POSITIVE);
        RES_AIR_GAIN_PERCENT = new RunningEffectDefinition(85, new CharacGain(FighterCharacteristicType.RES_AIR_PERCENT), RunningEffectConstants.m_instance, -1, "Gain de la r\u00e9sistance Air (%)", RunningEffectStatus.POSITIVE);
        RES_LOSS_IN_PERCENT = new RunningEffectDefinition(90, new CharacLoss(FighterCharacteristicType.RES_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Perte de r\u00e9sistance \u00e0 tous les \u00e9l\u00e9ments (%)", RunningEffectStatus.NEGATIVE);
        RES_EARTH_LOSS_PERCENT = new RunningEffectDefinition(92, new CharacLoss(FighterCharacteristicType.RES_EARTH_PERCENT), RunningEffectConstants.m_instance, -1, "Perte de la r\u00e9sistance Terre (%)", RunningEffectStatus.NEGATIVE);
        RES_FIRE_LOSS_PERCENT = new RunningEffectDefinition(93, new CharacLoss(FighterCharacteristicType.RES_FIRE_PERCENT), RunningEffectConstants.m_instance, -1, "Perte de la r\u00e9sistance Feu (%)", RunningEffectStatus.NEGATIVE);
        RES_WATER_LOSS_PERCENT = new RunningEffectDefinition(94, new CharacLoss(FighterCharacteristicType.RES_WATER_PERCENT), RunningEffectConstants.m_instance, -1, "Perte de la r\u00e9sistance Eau (%)", RunningEffectStatus.NEGATIVE);
        RES_AIR_LOSS_PERCENT = new RunningEffectDefinition(95, new CharacLoss(FighterCharacteristicType.RES_AIR_PERCENT), RunningEffectConstants.m_instance, -1, "Perte de la r\u00e9sistance Air (%)", RunningEffectStatus.NEGATIVE);
        DMG_GAIN_IN_PERCENT = new RunningEffectDefinition(120, new CharacGain(FighterCharacteristicType.DMG_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Gain aux d\u00e9g\u00e2ts (%)", RunningEffectStatus.POSITIVE);
        DMG_FIRE_GAIN_PERCENT = new RunningEffectDefinition(122, new CharacGain(FighterCharacteristicType.DMG_FIRE_PERCENT), RunningEffectConstants.m_instance, -1, "Gain aux d\u00e9g\u00e2ts - Feu (%)", RunningEffectStatus.POSITIVE);
        DMG_EARTH_GAIN_PERCENT = new RunningEffectDefinition(123, new CharacGain(FighterCharacteristicType.DMG_EARTH_PERCENT), RunningEffectConstants.m_instance, -1, "Gain aux d\u00e9g\u00e2ts - Terre (%)", RunningEffectStatus.POSITIVE);
        DMG_WATER_GAIN_PERCENT = new RunningEffectDefinition(124, new CharacGain(FighterCharacteristicType.DMG_WATER_PERCENT), RunningEffectConstants.m_instance, -1, "Gain aux d\u00e9g\u00e2ts - Eau (%)", RunningEffectStatus.POSITIVE);
        DMG_AIR_GAIN_PERCENT = new RunningEffectDefinition(125, new CharacGain(FighterCharacteristicType.DMG_AIR_PERCENT), RunningEffectConstants.m_instance, -1, "Gain aux d\u00e9g\u00e2ts - Air (%)", RunningEffectStatus.POSITIVE);
        FINAL_DMG_IN_PERCENT = new RunningEffectDefinition(126, new CharacGain(FighterCharacteristicType.FINAL_DMG_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Gain de DMG appliqu\u00e9 \u00e0 la valeur finale", RunningEffectStatus.POSITIVE);
        FINAL_RES_IN_PERCENT = new RunningEffectDefinition(127, new CharacGain(FighterCharacteristicType.FINAL_RES_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Gain Res au DMG appliqu\u00e9 \u00e0 la valeur finale", RunningEffectStatus.POSITIVE);
        FINAL_RES_IN_PERCENT_LOSS = new RunningEffectDefinition(128, new CharacLoss(FighterCharacteristicType.FINAL_RES_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Perte de R\u00e9s au DMG appliqu\u00e9 \u00e0 la valeur finale", RunningEffectStatus.POSITIVE);
        FINAL_DMG_IN_PERCENT_LOSS = new RunningEffectDefinition(129, new CharacLoss(FighterCharacteristicType.FINAL_DMG_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Perte de DMG appliqu\u00e9 \u00e0 la valeur finale", RunningEffectStatus.NEGATIVE);
        DMG_LOSS_IN_PERCENT = new RunningEffectDefinition(130, new CharacLoss(FighterCharacteristicType.DMG_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Perte aux d\u00e9g\u00e2ts (%)", RunningEffectStatus.NEGATIVE);
        DMG_FIRE_LOSS_PERCENT = new RunningEffectDefinition(132, new CharacLoss(FighterCharacteristicType.DMG_FIRE_PERCENT), RunningEffectConstants.m_instance, -1, "Perte aux d\u00e9g\u00e2ts - Feu (%)", RunningEffectStatus.NEGATIVE);
        DMG_EARTH_LOSS_PERCENT = new RunningEffectDefinition(133, new CharacLoss(FighterCharacteristicType.DMG_EARTH_PERCENT), RunningEffectConstants.m_instance, -1, "Perte aux d\u00e9g\u00e2ts - Terre (%)", RunningEffectStatus.NEGATIVE);
        DMG_WATER_LOSS_PERCENT = new RunningEffectDefinition(134, new CharacLoss(FighterCharacteristicType.DMG_WATER_PERCENT), RunningEffectConstants.m_instance, -1, "Perte aux d\u00e9g\u00e2ts - Eau (%)", RunningEffectStatus.NEGATIVE);
        DMG_AIR_LOSS_PERCENT = new RunningEffectDefinition(135, new CharacLoss(FighterCharacteristicType.DMG_AIR_PERCENT), RunningEffectConstants.m_instance, -1, "Perte aux d\u00e9g\u00e2ts - Air (%)", RunningEffectStatus.NEGATIVE);
        PUNISHMENT = new RunningEffectDefinition(136, new Punishment(), RunningEffectConstants.m_instance, -1, "Perte de PdV feu en fonction des PdV manquant du caster, \u00e0 partir d'un seuil", RunningEffectStatus.NEGATIVE);
        DAMAGES_REBOUND_IN_PERCENT = new RunningEffectDefinition(140, new CharacGain(FighterCharacteristicType.DMG_REBOUND), RunningEffectConstants.m_instance, -1, "Renvoi de d\u00e9g\u00e2ts (%)", RunningEffectStatus.POSITIVE);
        DAMAGES_ABSORB_IN_PERCENT = new RunningEffectDefinition(141, new CharacGain(FighterCharacteristicType.DMG_ABSORB), RunningEffectConstants.m_instance, -1, "Absorption de d\u00e9g\u00e2ts (%)", RunningEffectStatus.POSITIVE);
        LIFE_STOLEN_BONUS_GAIN = new RunningEffectDefinition(148, new CharacGain(FighterCharacteristicType.LIFE_STOLEN_BONUS), RunningEffectConstants.m_instance, -1, "Bonus au % de PdV vol\u00e9 sur un vol de PdV", RunningEffectStatus.POSITIVE);
        CRITICAL_BONUS_GAIN = new RunningEffectDefinition(149, new CharacGain(FighterCharacteristicType.CRITICAL_BONUS), RunningEffectConstants.m_instance, -1, "Augmente le bonus aux degats des Coup Critique", RunningEffectStatus.POSITIVE);
        CC_GAIN = new RunningEffectDefinition(150, new CharacGain(FighterCharacteristicType.FEROCITY), RunningEffectConstants.m_instance, -1, "Augmente le taux de Coup Critique", RunningEffectStatus.POSITIVE);
        EC_GAIN = new RunningEffectDefinition(151, new CharacGain(FighterCharacteristicType.FUMBLE_RATE), RunningEffectConstants.m_instance, -1, "Augmente le taux d'Echec Critique", RunningEffectStatus.NEGATIVE);
        AGILITY_GAIN = new RunningEffectDefinition(152, new CharacGain(FighterCharacteristicType.AGILITY), RunningEffectConstants.m_instance, -1, "Augmente l'Agilit\u00e9", RunningEffectStatus.POSITIVE);
        AGILITY_LOSS = new RunningEffectDefinition(153, new CharacLoss(FighterCharacteristicType.AGILITY), RunningEffectConstants.m_instance, -1, "Diminue l'Agilit\u00e9", RunningEffectStatus.NEGATIVE);
        STRENGTH_GAIN = new RunningEffectDefinition(154, new CharacGain(FighterCharacteristicType.STRENGTH), RunningEffectConstants.m_instance, -1, "Augmente la Force", RunningEffectStatus.POSITIVE);
        STRENGTH_LOSS = new RunningEffectDefinition(155, new CharacLoss(FighterCharacteristicType.STRENGTH), RunningEffectConstants.m_instance, -1, "Diminue la Force", RunningEffectStatus.NEGATIVE);
        INTELLIGENCE_GAIN = new RunningEffectDefinition(156, new CharacGain(FighterCharacteristicType.INTELLIGENCE), RunningEffectConstants.m_instance, -1, "Augmente l'Intelligence", RunningEffectStatus.POSITIVE);
        INTELLIGENCE_LOSS = new RunningEffectDefinition(157, new CharacLoss(FighterCharacteristicType.INTELLIGENCE), RunningEffectConstants.m_instance, -1, "Diminue l'Intelligence", RunningEffectStatus.NEGATIVE);
        LUCK_GAIN = new RunningEffectDefinition(158, new CharacGain(FighterCharacteristicType.LUCK), RunningEffectConstants.m_instance, -1, "Augmente la Chance", RunningEffectStatus.POSITIVE);
        LUCK_LOSS = new RunningEffectDefinition(159, new CharacLoss(FighterCharacteristicType.LUCK), RunningEffectConstants.m_instance, -1, "Diminue la Chance", RunningEffectStatus.NEGATIVE);
        RANGE_GAIN = new RunningEffectDefinition(160, new CharacGain(FighterCharacteristicType.RANGE), RunningEffectConstants.m_instance, 1011, "Augmente la Port\u00e9e", RunningEffectStatus.POSITIVE);
        RANGE_LOSS = new RunningEffectDefinition(161, new CharacLoss(FighterCharacteristicType.RANGE), RunningEffectConstants.m_instance, 1012, "Diminue la Port\u00e9e", RunningEffectStatus.NEGATIVE);
        PROSPECTION_GAIN = new RunningEffectDefinition(162, new CharacGain(FighterCharacteristicType.PROSPECTION), RunningEffectConstants.m_instance, -1, "Augmente la Prospection", RunningEffectStatus.POSITIVE);
        PROSPECTION_LOSS = new RunningEffectDefinition(163, new CharacLoss(FighterCharacteristicType.PROSPECTION), RunningEffectConstants.m_instance, -1, "Diminue la Prospection", RunningEffectStatus.NEGATIVE);
        WISDOM_GAIN = new RunningEffectDefinition(166, new CharacGain(FighterCharacteristicType.WISDOM), RunningEffectConstants.m_instance, -1, "Augmente la Sagesse", RunningEffectStatus.POSITIVE);
        WISDOM_LOSS = new RunningEffectDefinition(167, new CharacLoss(FighterCharacteristicType.WISDOM), RunningEffectConstants.m_instance, -1, "Diminue la Sagesse", RunningEffectStatus.NEGATIVE);
        FEROCITY_LOSS = new RunningEffectDefinition(168, new CharacLoss(FighterCharacteristicType.FEROCITY), RunningEffectConstants.m_instance, -1, "Diminue le taux de Coup Critique", RunningEffectStatus.POSITIVE);
        FUMBLE_RATE_LOSS = new RunningEffectDefinition(169, new CharacLoss(FighterCharacteristicType.FUMBLE_RATE), RunningEffectConstants.m_instance, -1, "Diminue le taux d'Echec Critique", RunningEffectStatus.NEGATIVE);
        INIT_GAIN = new RunningEffectDefinition(171, new CharacGain(FighterCharacteristicType.INIT), RunningEffectConstants.m_instance, -1, "Gain d'Initiative", RunningEffectStatus.POSITIVE);
        INIT_LOSS = new RunningEffectDefinition(172, new CharacLoss(FighterCharacteristicType.INIT), RunningEffectConstants.m_instance, -1, "Perte d'Initiative", RunningEffectStatus.NEGATIVE);
        TACKLE_GAIN = new RunningEffectDefinition(173, new CharacGain(FighterCharacteristicType.TACKLE), RunningEffectConstants.m_instance, -1, "Gain de Tacle", RunningEffectStatus.POSITIVE);
        TACKLE_LOSS = new RunningEffectDefinition(174, new CharacLoss(FighterCharacteristicType.TACKLE), RunningEffectConstants.m_instance, -1, "Perte de Tacle", RunningEffectStatus.NEGATIVE);
        DODGE_GAIN = new RunningEffectDefinition(175, new CharacGain(FighterCharacteristicType.DODGE), RunningEffectConstants.m_instance, -1, "Gain d'Esquive", RunningEffectStatus.POSITIVE);
        DODGE_LOSS = new RunningEffectDefinition(176, new CharacLoss(FighterCharacteristicType.DODGE), RunningEffectConstants.m_instance, -1, "Perte d'Esquive", RunningEffectStatus.NEGATIVE);
        BACKSTAB_BONUS_GAIN = new RunningEffectDefinition(180, new CharacGain(FighterCharacteristicType.BACKSTAB_BONUS), RunningEffectConstants.m_instance, -1, "Gain en bonus de Backstab", RunningEffectStatus.POSITIVE);
        BACKSTAB_BONUS_LOSS = new RunningEffectDefinition(181, new CharacLoss(FighterCharacteristicType.BACKSTAB_BONUS), RunningEffectConstants.m_instance, -1, "Perte du bonus de Backstab", RunningEffectStatus.NEGATIVE);
        MECHANISM_MASTERY = new RunningEffectDefinition(182, new CharacGain(FighterCharacteristicType.SUMMONING_MASTERY), RunningEffectConstants.m_instance, -1, "Gain en maitrise des m\u00e9canismes (Obsol\u00e8te - devient gain aux d\u00e9gats de CMC (838))", RunningEffectStatus.POSITIVE);
        BONUS_TRAP = new RunningEffectDefinition(183, new CharacGain(FighterCharacteristicType.LEADERSHIP), RunningEffectConstants.m_instance, -1, "Gain en M\u00e9canisme (Obsol\u00e8te - devient gain en commandement (184))", RunningEffectStatus.POSITIVE);
        BONUS_SUMMON = new RunningEffectDefinition(184, new CharacGain(FighterCharacteristicType.LEADERSHIP), RunningEffectConstants.m_instance, -1, "Gain en Controle", RunningEffectStatus.POSITIVE);
        WP_BOOST = new RunningEffectDefinition(191, new CharacBuff(FighterCharacteristicType.WP), RunningEffectConstants.m_instance, -1, "Boost de WP", RunningEffectStatus.POSITIVE);
        WP_DEBOOST = new RunningEffectDefinition(192, new CharacDebuff(FighterCharacteristicType.WP), RunningEffectConstants.m_instance, -1, "Deboost de WP", RunningEffectStatus.NEGATIVE);
        WP_GAIN = new RunningEffectDefinition(193, new CharacGain(FighterCharacteristicType.WP), RunningEffectConstants.m_instance, 1032, "Gain de WP", RunningEffectStatus.POSITIVE);
        WP_LOSS = new RunningEffectDefinition(194, new CharacLoss(FighterCharacteristicType.WP), RunningEffectConstants.m_instance, 1035, "Perte de WP", RunningEffectStatus.NEGATIVE);
        WP_STEAL = new RunningEffectDefinition(195, new CharacSteal(FighterCharacteristicType.WP), RunningEffectConstants.m_instance, 1012, "Vol de WP", RunningEffectStatus.NEGATIVE);
        RAISE = new RunningEffectDefinition(196, new Raise(), RunningEffectConstants.m_instance, -1, "Resurrection", RunningEffectStatus.POSITIVE);
        VITALITY_GAIN = new RunningEffectDefinition(197, new CharacGain(FighterCharacteristicType.VITALITY), RunningEffectConstants.m_instance, -1, "Augmente la Vitalit\u00e9", RunningEffectStatus.POSITIVE);
        VITALITY_LOSS = new RunningEffectDefinition(198, new CharacLoss(FighterCharacteristicType.VITALITY), RunningEffectConstants.m_instance, -1, "Diminue la Vitalit\u00e9", RunningEffectStatus.NEGATIVE);
        SKIP_TURN = new RunningEffectDefinition(200, new PropertyApply(FightPropertyType.SKIP_TURN), RunningEffectConstants.m_instance, -1, "Passe son tour (propri\u00e9t\u00e9) (P)", RunningEffectStatus.NEUTRAL);
        REDUCE_RANGE_TO_CAC = new RunningEffectDefinition(201, new PropertyApply(FightPropertyType.RANGE_REDUCED_TO_CAC), RunningEffectConstants.m_instance, -1, "Reduit la Port\u00e9e au CAC (P)", RunningEffectStatus.NEUTRAL);
        ROOTED = new RunningEffectDefinition(202, new PropertyApply(FightPropertyType.ROOTED), RunningEffectConstants.m_instance, -1, "Entrav\u00e9 (ne peut plus bouger) (P)", RunningEffectStatus.NEUTRAL);
        IMMUNE_TO_MP_LOSS = new RunningEffectDefinition(203, new PropertyApply(FightPropertyType.IMMUNE_TO_MP_LOSS), RunningEffectConstants.m_instance, -1, "Immunit\u00e9 \u00e0 la perte de PM (sauf self) (P)", RunningEffectStatus.NEUTRAL);
        INVISIBLE = new RunningEffectDefinition(204, new PropertyApply(FightPropertyType.INVISIBLE), RunningEffectConstants.m_instance, -1, "Invisible (P)", RunningEffectStatus.NEUTRAL);
        INVISIBLE_SUPERIOR = new RunningEffectDefinition(205, new PropertyApply(FightPropertyType.INVISIBLE_SUPERIOR), RunningEffectConstants.m_instance, -1, "Invisible Sup\u00e9rieur (unbreakable) (P)", RunningEffectStatus.NEUTRAL);
        FIGHT_FORBIDDEN = new RunningEffectDefinition(206, new PropertyApply(WorldPropertyType.CANT_ATTACK), RunningEffectConstants.m_instance, -1, "Ne peut pas d\u00e9clencher un combat (P)", RunningEffectStatus.NEUTRAL);
        CHANGE_CONTROLLER = new RunningEffectDefinition(207, new ChangeController(), RunningEffectConstants.m_instance, -1, "Change le controlleur d'un combattant par le caster", RunningEffectStatus.NEUTRAL);
        COWARD = new RunningEffectDefinition(208, new PropertyApply(FightPropertyType.COWARD), RunningEffectConstants.m_instance, -1, "Coward : ne peut attaquer plus gros que soi (FP)", RunningEffectStatus.NEUTRAL);
        HASTE = new RunningEffectDefinition(209, new PropertyApply(FightPropertyType.HASTE), RunningEffectConstants.m_instance, -1, "H\u00e2te : premiere dans la timeline(FP)", RunningEffectStatus.NEUTRAL);
        STABILIZED = new RunningEffectDefinition(210, new PropertyApply(FightPropertyType.STABILIZED), RunningEffectConstants.m_instance, -1, "Stabilis\u00e9 (ne peut pas etre boug\u00e9 par autrui) (FP)", RunningEffectStatus.NEUTRAL);
        CANT_BE_ATTACKED = new RunningEffectDefinition(211, new PropertyApply(WorldPropertyType.CANT_BE_ATTACKED), RunningEffectConstants.m_instance, -1, "Ne peut pas \u00eatre attaqu\u00e9 (WP)", RunningEffectStatus.NEUTRAL);
        CANT_TACKLE = new RunningEffectDefinition(212, new PropertyApply(FightPropertyType.CANT_TACKLE), RunningEffectConstants.m_instance, -1, "Ne peut plus tacler (FP)", RunningEffectStatus.NEUTRAL);
        STATE_RESISTANCE = new RunningEffectDefinition(213, new StateResistance(), RunningEffectConstants.m_instance, -1, "R\u00e9sistance aux etats", RunningEffectStatus.NEUTRAL);
        NO_FIGHT_XP = new RunningEffectDefinition(214, new PropertyApply(WorldPropertyType.NO_SPELL_OR_SKILL_XP), RunningEffectConstants.m_instance, -1, "Pas d'xp de combat (WP)", RunningEffectStatus.NEUTRAL);
        SET_MAX_AP_COS = new RunningEffectDefinition(215, new PropertyApply(FightPropertyType.MAX_PA_COST), RunningEffectConstants.m_instance, -1, "Limite le co\u00fbt en PA maximum utilisable", RunningEffectStatus.NEUTRAL);
        SET_EFFECT_AREA_GRIP = new RunningEffectDefinition(216, new PropertyApply(EffectAreaPropertyType.GRIP), RunningEffectConstants.m_instance, -1, "Grip : La case arr\u00eate le joueur pouss\u00e9 / tir\u00e9", RunningEffectStatus.NEUTRAL);
        REVEAL_INVISIBLE = new RunningEffectDefinition(217, new PropertyApply(FightPropertyType.INVISIBLE_REVEALED), RunningEffectConstants.m_instance, -1, "Invisible r\u00e9v\u00e9l\u00e9 pour un temps (P) ", RunningEffectStatus.NEUTRAL);
        UNDEAD = new RunningEffectDefinition(218, new PropertyApply(FightPropertyType.UNDEAD), RunningEffectConstants.m_instance, -1, "Mort-Vivant (P) ", RunningEffectStatus.NEGATIVE);
        UNTARGETTABLE = new RunningEffectDefinition(219, new PropertyApply(FightPropertyType.UNTARGETTABLE_BY_OTHER), RunningEffectConstants.m_instance, -1, "Inciblable : ne peut pas \u00eatre cibl\u00e9 de mani\u00e8re directe (P) ", RunningEffectStatus.NEGATIVE);
        IA_DOUBLE_FOCUS = new RunningEffectDefinition(220, new PropertyApply(FightPropertyType.IA_DOUBLE_FOCUS_ON_TARGET), RunningEffectConstants.m_instance, -1, "Double le Focus : l'IA a deux fois plus envie de baffer le porteur de cette propri\u00e9t\u00e9 (P) ", RunningEffectStatus.NEGATIVE);
        STASIS_1 = new RunningEffectDefinition(221, new PropertyApply(FightPropertyType.STASIS_1), RunningEffectConstants.m_instance, -1, "Stasis 1 : Ajoute 1 au co\u00fbt en WP du sort (P) ", RunningEffectStatus.NEGATIVE);
        STASIS_2 = new RunningEffectDefinition(222, new PropertyApply(FightPropertyType.STASIS_2), RunningEffectConstants.m_instance, -1, "Stasis 2 : Ajoute 2 au co\u00fbt en WP du sort (P) ", RunningEffectStatus.NEGATIVE);
        STASIS_3 = new RunningEffectDefinition(223, new PropertyApply(FightPropertyType.STASIS_3), RunningEffectConstants.m_instance, -1, "Stasis 3 : Interdit les co\u00fbts en WP du sort (P) ", RunningEffectStatus.NEGATIVE);
        IA_MINIMIZE_FOCUS = new RunningEffectDefinition(224, new PropertyApply(FightPropertyType.IA_MINIMIZE_FOCUS_ON_TARGET), RunningEffectConstants.m_instance, -1, "Diminue au maximum le focus : l'ia choisira cette cible en dernier recours ", RunningEffectStatus.NEGATIVE);
        RAISE_OUT_OF_COMBAT = new RunningEffectDefinition(225, new RaiseOutOfCombat(), RunningEffectConstants.m_instance, -1, "R\u00e9surection hors combat", RunningEffectStatus.POSITIVE);
        GROGGY_1 = new RunningEffectDefinition(226, new PropertyApply(FightPropertyType.GROGGY_1), RunningEffectConstants.m_instance, -1, "Sonn\u00e9 1 : Ajoute 1 au co\u00fbt des PA du sort (P)", RunningEffectStatus.NEGATIVE);
        GROGGY_2 = new RunningEffectDefinition(227, new PropertyApply(FightPropertyType.GROGGY_2), RunningEffectConstants.m_instance, -1, "Sonn\u00e9 2 : Ajoute 2 au co\u00fbt des PA du sort (P)", RunningEffectStatus.NEGATIVE);
        GROGGY_3 = new RunningEffectDefinition(228, new PropertyApply(FightPropertyType.GROGGY_3), RunningEffectConstants.m_instance, -1, "Sonn\u00e9 3 : ne peut plus utiliser de PA (P)", RunningEffectStatus.NEGATIVE);
        CRIPPLED_1 = new RunningEffectDefinition(229, new PropertyApply(FightPropertyType.CRIPPLED_1), RunningEffectConstants.m_instance, -1, "Boiteux 1 : Ajoute 1 au co\u00fbt des PM du sort (P)", RunningEffectStatus.NEGATIVE);
        CRIPPLED_2 = new RunningEffectDefinition(230, new PropertyApply(FightPropertyType.CRIPPLED_2), RunningEffectConstants.m_instance, -1, "Boiteux 2 : Ajoute 2 au co\u00fbt des PM du sort (P)", RunningEffectStatus.NEGATIVE);
        CRIPPLED_3 = new RunningEffectDefinition(231, new PropertyApply(FightPropertyType.CRIPPLED_3), RunningEffectConstants.m_instance, -1, "Boiteux 3 : ne peut plus utiliser de PM (P)", RunningEffectStatus.NEGATIVE);
        LAME = new RunningEffectDefinition(232, new PropertyApply(FightPropertyType.LAME), RunningEffectConstants.m_instance, -1, "Eclop\u00e9 : 2 PM au lieu d'1 pour se d\u00e9placer (P)", RunningEffectStatus.NEGATIVE);
        EQUIPMENT_KNOWLEDGE_GAIN = new RunningEffectDefinition(234, new CharacGain(FighterCharacteristicType.EQUIPMENT_KNOWLEDGE), RunningEffectConstants.m_instance, -1, "Boost la Connaissance de l'Equipement", RunningEffectStatus.POSITIVE);
        AP_DEBUFF_POWER = new RunningEffectDefinition(235, new CharacGain(FighterCharacteristicType.AP_DEBUFF_POWER), RunningEffectConstants.m_instance, -1, "Augmente la probabilit\u00e9 de faire perdre des PA \u00e0 une cible", RunningEffectStatus.POSITIVE);
        MP_DEBUFF_POWER = new RunningEffectDefinition(236, new CharacGain(FighterCharacteristicType.MP_DEBUFF_POWER), RunningEffectConstants.m_instance, -1, "Augmente la probabilit\u00e9 de faire perdre des PM \u00e0 une cible", RunningEffectStatus.POSITIVE);
        EXTRA_TURN = new RunningEffectDefinition(237, new PropertyApply(FightPropertyType.EXTRA_TURN), RunningEffectConstants.m_instance, -1, "Extra-tour (P)", RunningEffectStatus.POSITIVE);
        NO_DEATH = new RunningEffectDefinition(238, new PropertyApply(FightPropertyType.NO_DEATH), RunningEffectConstants.m_instance, -1, "Pas de mort en fin de combat", RunningEffectStatus.POSITIVE);
        STATE_APPLICATION_BONUS = new RunningEffectDefinition(239, new StateApplicationBonus(), RunningEffectConstants.m_instance, -1, "Ajoute un bonus d'application \u00e0 un \u00e9tat", RunningEffectStatus.POSITIVE);
        DONT_BLOCK_LOS = new RunningEffectDefinition(240, new PropertyApply(FightPropertyType.DONT_BLOCK_LOS), RunningEffectConstants.m_instance, -1, "Ne bloque pas les lignes de vue", RunningEffectStatus.POSITIVE);
        ESCAPE_TACKLE = new RunningEffectDefinition(241, new PropertyApply(FightPropertyType.ESCAPE_TACKLE), RunningEffectConstants.m_instance, -1, "Ne peut pas etre tacl\u00e9", RunningEffectStatus.POSITIVE);
        CANT_TELEPORT = new RunningEffectDefinition(242, new PropertyApply(FightPropertyType.CANT_TELEPORT), RunningEffectConstants.m_instance, -1, "Ne peut pas se t\u00e9l\u00e9porter", RunningEffectStatus.POSITIVE);
        HP_BOOST_IN_PERCENT_FUNCTION_ALLIES_COUNT = new RunningEffectDefinition(249, new CharacBoostInPercentFunctionAlliesCount(FighterCharacteristicType.HP), RunningEffectConstants.m_instance, -1, "Boost les PdV max de la cible en fct du nb d'alli\u00e9s", RunningEffectStatus.POSITIVE);
        HP_BOOST_IN_PERCENT = new RunningEffectDefinition(250, new CharacBoostInPercentFunctionCaster(FighterCharacteristicType.HP), RunningEffectConstants.m_instance, -1, "Boost les PdV max de la cible (%) en fct des PdV max du caster", RunningEffectStatus.POSITIVE);
        HP_GAIN_AIR = new RunningEffectDefinition(251, new HPGain(Elements.AIR), RunningEffectConstants.m_instance, 1002, "Soins - Air", RunningEffectStatus.POSITIVE);
        HP_GAIN_EARTH = new RunningEffectDefinition(253, new HPGain(Elements.EARTH), RunningEffectConstants.m_instance, 1002, "Soins - Terre", RunningEffectStatus.POSITIVE);
        HP_GAIN_WATER = new RunningEffectDefinition(258, new HPGain(Elements.WATER), RunningEffectConstants.m_instance, 1002, "Soins - Eau", RunningEffectStatus.POSITIVE);
        HP_GAIN_FIRE = new RunningEffectDefinition(259, new HPGain(Elements.FIRE), RunningEffectConstants.m_instance, 1002, "Soins - Feu", RunningEffectStatus.POSITIVE);
        WISDOM_BOOST = new RunningEffectDefinition(260, new CharacBuff(FighterCharacteristicType.WISDOM), RunningEffectConstants.m_instance, -1, "Boost la sagesse (augmente la valeur max)", RunningEffectStatus.POSITIVE);
        HP_GAIN_AIR_FOR_CASTER_BASED_ON_TARGET = new RunningEffectDefinition(261, new HPGainForCasterBasedOnTarget(Elements.AIR), RunningEffectConstants.m_instance, 1002, "Soins du caster par rapport aux PdV de la cible - Air", RunningEffectStatus.POSITIVE);
        HP_GAIN_EARTH_FOR_CASTER_BASED_ON_TARGET = new RunningEffectDefinition(262, new HPGainForCasterBasedOnTarget(Elements.EARTH), RunningEffectConstants.m_instance, 1002, "Soins du caster par rapport aux PdV de la cible - Terre", RunningEffectStatus.POSITIVE);
        HP_GAIN_WATER_FOR_CASTER_BASED_ON_TARGET = new RunningEffectDefinition(263, new HPGainForCasterBasedOnTarget(Elements.WATER), RunningEffectConstants.m_instance, 1002, "Soins du caster par rapport aux PdV de la cible - Eau", RunningEffectStatus.POSITIVE);
        HP_GAIN_FIRE_FOR_CASTER_BASED_ON_TARGET = new RunningEffectDefinition(264, new HPGainForCasterBasedOnTarget(Elements.FIRE), RunningEffectConstants.m_instance, 1002, "Soins du caster par rapport aux PdV de la cible - Feu", RunningEffectStatus.POSITIVE);
        HP_GAIN_PHYSICAL_FOR_CASTER_BASED_ON_TARGET = new RunningEffectDefinition(265, new HPGainForCasterBasedOnTarget(Elements.PHYSICAL), RunningEffectConstants.m_instance, 1002, "Soins du caster par rapport aux PdV de la cible - Physique", RunningEffectStatus.POSITIVE);
        INIT_GAIN_PERCENT_OF_VALUE = new RunningEffectDefinition(270, new CharacGain(FighterCharacteristicType.INIT, true), RunningEffectConstants.m_instance, -1, "Gain d'Initiative (%)", RunningEffectStatus.POSITIVE);
        INIT_LOSS_PERCENT_OF_VALUE = new RunningEffectDefinition(271, new CharacLoss(FighterCharacteristicType.INIT, true), RunningEffectConstants.m_instance, -1, "Perte d'Initiative (%)", RunningEffectStatus.NEGATIVE);
        MP_SET_TO_MAX = new RunningEffectDefinition(272, new SetCharacToMax(FighterCharacteristicType.MP), RunningEffectConstants.m_instance, -1, "Regen des MP au max", RunningEffectStatus.POSITIVE);
        PUSH = new RunningEffectDefinition(300, new Push(), RunningEffectConstants.m_instance, 1033, "Poussage", RunningEffectStatus.NEUTRAL);
        PULL = new RunningEffectDefinition(301, new Pull(), RunningEffectConstants.m_instance, 1033, "Tirage", RunningEffectStatus.NEUTRAL);
        TELEPORT_CASTER = new RunningEffectDefinition(302, new TeleportCaster(), RunningEffectConstants.m_instance, -1, "T\u00e9l\u00e9port le caster de l'effet", RunningEffectStatus.NEUTRAL);
        ATTRACT_SIGHT = new RunningEffectDefinition(303, new ChangeDirection(), RunningEffectConstants.m_instance, 1039, "Tourne le regard vers la cellule ou la direction cibl\u00e9e, ou dans une direction al\u00e9atoire", RunningEffectStatus.NEUTRAL);
        STATE_APPLY = new RunningEffectDefinition(304, new ApplyState(), RunningEffectConstants.m_instance, 1015, "Applique un Etat", RunningEffectStatus.NEUTRAL);
        GET_CLOSER = new RunningEffectDefinition(305, new GetCloser(), RunningEffectConstants.m_instance, 1033, "Se rapproche de la cible", RunningEffectStatus.NEUTRAL);
        PULL_ON_CASTER_BACK = new RunningEffectDefinition(306, new PullTargetBackToCaster(), RunningEffectConstants.m_instance, -1, "Balance la cible derriere son dos", RunningEffectStatus.NEUTRAL);
        SUMMON = new RunningEffectDefinition(307, new Summon(), RunningEffectConstants.m_instance, -1, "Invoque une cr\u00e9ature", RunningEffectStatus.NEUTRAL);
        SET_TRAP = new RunningEffectDefinition(308, new SetTrap(), RunningEffectConstants.m_instance, -1, "Pose un Pi\u00e8ge", RunningEffectStatus.NEUTRAL);
        SPELL_REBOUND = new RunningEffectDefinition(309, new SpellRebound(), RunningEffectConstants.m_instance, -1, "Renvoi un sort entier (a utiliser avec les triggers sp\u00e9cifiques de lancement de sort)", RunningEffectStatus.NEUTRAL);
        RUNNING_STATE = new RunningEffectDefinition(310, new StateRunningEffect(), RunningEffectConstants.m_instance, -1, "Etat en lui m\u00eame (ne pas utiliser)", RunningEffectStatus.NEUTRAL);
        SET_CADRAN = new RunningEffectDefinition(311, new SetCadran(), RunningEffectConstants.m_instance, -1, "Pose un Cadran sur le sol", RunningEffectStatus.NEUTRAL);
        SET_HOUR = new RunningEffectDefinition(312, new SetHourEffectArea(), RunningEffectConstants.m_instance, -1, "Pose une Case Heure sur le sol", RunningEffectStatus.NEUTRAL);
        SET_BEACON = new RunningEffectDefinition(313, new SetBeacon(), RunningEffectConstants.m_instance, -1, "Pose une Balise sur le sol", RunningEffectStatus.NEUTRAL);
        SET_AURA = new RunningEffectDefinition(314, new SetEffectArea(false, true, true), RunningEffectConstants.m_instance, -1, "Deploie une Aura autour de soi", RunningEffectStatus.NEUTRAL);
        SET_GLYPH = new RunningEffectDefinition(315, new SetEffectArea(), RunningEffectConstants.m_instance, -1, "Pose une Glyphe sur le sol", RunningEffectStatus.NEUTRAL);
        UNSET_AURAS = new RunningEffectDefinition(316, new UnsetAuras(), RunningEffectConstants.m_instance, -1, "D\u00e9sactive toutes les Auras de la cible", RunningEffectStatus.NEUTRAL);
        SET_BOMB = new RunningEffectDefinition(317, new SetBombEffectArea(), RunningEffectConstants.m_instance, -1, "Pose une bombe", RunningEffectStatus.NEUTRAL);
        SEDUCE_MONSTER = new RunningEffectDefinition(320, new SeduceCreature(), RunningEffectConstants.m_instance, 1015, "Seduire un monstre", RunningEffectStatus.NEUTRAL);
        STATE_FORCE_UNAPPLY = new RunningEffectDefinition(321, new StateDecurse(), RunningEffectConstants.m_instance, -1, "D\u00e9sapplique un  Etat", RunningEffectStatus.NEUTRAL);
        SUMMON_SRAM_DOUBLE = new RunningEffectDefinition(322, new SummonSramDouble(), RunningEffectConstants.m_instance, -1, "Invoque un Double Sram", RunningEffectStatus.NEUTRAL);
        BRING_BACK = new RunningEffectDefinition(323, new BringBackToSymbiot(), RunningEffectConstants.m_instance, -1, "Ram\u00e8ne la cr\u00e9ature invoqu\u00e9e dans le symbiote", RunningEffectStatus.POSITIVE);
        SUMMON_FROM_SYMBIOT = new RunningEffectDefinition(324, new SummonFromSymbiot(), RunningEffectConstants.m_instance, -1, "Invoque une cr\u00e9ature contenue dans le symbiote", RunningEffectStatus.NEUTRAL);
        SET_AI = new RunningEffectDefinition(325, new SetAI(), RunningEffectConstants.m_instance, -1, "Active/desactive l'IA d'une cible", RunningEffectStatus.NEUTRAL);
        WEAPONATTACK = new RunningEffectDefinition(326, new WeaponAttack(), RunningEffectConstants.m_instance, -1, "Attaque avec l'arme en main, la cellule du perso qui trigger", RunningEffectStatus.NEUTRAL);
        AI_GIVE_ORDER = new RunningEffectDefinition(327, new AIGiveOrder(), RunningEffectConstants.m_instance, -1, "Donne un ordre \u00e0 l'IA li\u00e9 \u00e0 un personnage", RunningEffectStatus.NEUTRAL);
        AI_GIVE_ORDER_CELL = new RunningEffectDefinition(328, new AIGiveOrderOnCell(), RunningEffectConstants.m_instance, -1, "Donne un ordre \u00e0 l'IA li\u00e9 \u00e0 une cellule", RunningEffectStatus.NEUTRAL);
        RUNNING_EFFECT_GROUP = new RunningEffectDefinition(330, new RunningEffectGroup(), RunningEffectConstants.m_instance, -1, "Execute le groupe d'effets", RunningEffectStatus.NEUTRAL);
        REPELL = new RunningEffectDefinition(331, new Repell(), RunningEffectConstants.m_instance, -1, "S'\u00e9loigne de la cible", RunningEffectStatus.NEUTRAL);
        UNSUMMON = new RunningEffectDefinition(332, new Unsummon(), RunningEffectConstants.m_instance, -1, "D\u00e9sinvoque une cr\u00e9ature", RunningEffectStatus.NEUTRAL);
        THROW = new RunningEffectDefinition(333, new Throw(), RunningEffectConstants.m_instance, -1, "Jette le personnage port\u00e9", RunningEffectStatus.NEUTRAL);
        CARRY = new RunningEffectDefinition(334, new Carry(), RunningEffectConstants.m_instance, -1, "Porte le personnage cibl\u00e9", RunningEffectStatus.NEUTRAL);
        UPDATE_MAX_SEDUCABLE_CREATURES = new RunningEffectDefinition(337, new UpdateMaximumSeducableCreatures(), RunningEffectConstants.m_instance, -1, "Change le nombre maximum de creatures que l'on peut seduire", RunningEffectStatus.NEUTRAL);
        SET_AURA_ON_TARGET = new RunningEffectDefinition(338, new SetAuraOnTarget(), RunningEffectConstants.m_instance, -1, "Deploie une Aura autour de la cible", RunningEffectStatus.NEUTRAL);
        SET_EFFECT_AREA = new RunningEffectDefinition(339, new SetEffectArea(), RunningEffectConstants.m_instance, -1, "Pose une zone d'effet (mur, fakefighter ou warp, les autres zones ont leur propre effet)", RunningEffectStatus.NEUTRAL);
        TELEPORT_TARGET = new RunningEffectDefinition(340, new TeleportTarget(), RunningEffectConstants.m_instance, -1, "T\u00e9l\u00e9port la cible de l'effet", RunningEffectStatus.NEUTRAL);
        RANDOM_RUNNING_EFFECT_GROUP = new RunningEffectDefinition(341, new RandomRunningEffectGroup(), RunningEffectConstants.m_instance, -1, "Execute aleatoirement des effets a l'interieur d'un groupe", RunningEffectStatus.NEUTRAL);
        MAKE_FLEE = new RunningEffectDefinition(342, new MakeFlee(), RunningEffectConstants.m_instance, -1, "Permet de faire fuir la cible", RunningEffectStatus.NEUTRAL);
        APPLY_STATE_FUNCTION_PA_PM_PW = new RunningEffectDefinition(343, new ApplyStateFunctionPaPmPw(), RunningEffectConstants.m_instance, -1, "Applique un etat avec level fct des PA/PM/PW restants", RunningEffectStatus.NEUTRAL);
        SPELL_BREAK = new RunningEffectDefinition(344, new SpellBreak(), RunningEffectConstants.m_instance, -1, "Permet d'interrompre le lancement d'un sort", RunningEffectStatus.NEUTRAL);
        RUNNING_EFFECT_GROUP_RANDOM_TARGETS = new RunningEffectDefinition(345, new RunningEffectGroupWithRandomTarget(), RunningEffectConstants.m_instance, -1, "Execute un groupe d'effet sur des cibles al\u00e9atoires (parmi les cibles valides)", RunningEffectStatus.NEUTRAL);
        APPLY_DEATHTAG = new RunningEffectDefinition(346, new ApplyState(), RunningEffectConstants.m_instance, 1015, "Applique un Tag (d\u00e9clench\u00e9 par la mort)", RunningEffectStatus.NEUTRAL);
        SUMMON_IMAGE = new RunningEffectDefinition(347, new SummonImage(), RunningEffectConstants.m_instance, -1, "Invoque une Image du caster", RunningEffectStatus.NEUTRAL);
        SET_AREA_WITH_LEVEL_FUNCTION_SPELL = new RunningEffectDefinition(348, new SetEffectAreaFunctionSpellLevel(), RunningEffectConstants.m_instance, -1, "Pose une zone d'effet avec un niveau fonction d'un sort", RunningEffectStatus.NEUTRAL);
        EFFECT_RANDOM_IN_AREA = new RunningEffectDefinition(349, new RunningEffectGroupEffectRandomInArea(), RunningEffectConstants.m_instance, -1, "Groupe d'effets al\u00e9atoire sur les cellules de la zone", RunningEffectStatus.NEUTRAL);
        APPLY_STATE_WITHOUT_NOTIFICATION = new RunningEffectDefinition(350, new ApplyStateWithoutNotification(), RunningEffectConstants.m_instance, -1, "Applique un \u00e9tat sans le notifier", RunningEffectStatus.NEUTRAL);
        STATE_DECURSE_WITHOUT_NOTIFICATION = new RunningEffectDefinition(351, new StateDecurseWithoutNotification(), RunningEffectConstants.m_instance, -1, "D\u00e9sapplique un \u00e9tat sans le notifier", RunningEffectStatus.NEUTRAL);
        APPLY_STATE_FUNCTION_ACTION_COST = new RunningEffectDefinition(352, new ApplyStateFunctionActionCost(), RunningEffectConstants.m_instance, -1, "Applique un etat avec level fonction d'un ActionCost", RunningEffectStatus.NEUTRAL);
        APPLY_STATE_FOR_FECA_ARMOR = new RunningEffectDefinition(353, new ApplyStateForFecaArmor(), RunningEffectConstants.m_instance, -1, "Applique une armure Feca", RunningEffectStatus.NEUTRAL);
        REMOVE_FECA_ARMOR = new RunningEffectDefinition(354, new RemoveFecaArmor(), RunningEffectConstants.m_instance, -1, "Retire l'armure Feca", RunningEffectStatus.NEUTRAL);
        SET_FECA_GLYPH = new RunningEffectDefinition(355, new SetEffectArea(), RunningEffectConstants.m_instance, -1, "Pose un glyphe feca", RunningEffectStatus.NEUTRAL);
        XELORS_DIAL_CHARGE_GAIN = new RunningEffectDefinition(356, new CharacGain(FighterCharacteristicType.XELORS_DIAL_CHARGE), RunningEffectConstants.m_instance, -1, "Ajout de charges au cadran du Xelor", RunningEffectStatus.POSITIVE);
        XELORS_DIAL_CHARGE_LOSS = new RunningEffectDefinition(357, new CharacLoss(FighterCharacteristicType.XELORS_DIAL_CHARGE), RunningEffectConstants.m_instance, -1, "Retrait de charges au cadran du Xelor", RunningEffectStatus.NEGATIVE);
        SET_AI_WITH_SPELLS_FOR_IA_SERVER = new RunningEffectDefinition(358, new SetAIWithSpellsForAIServer(), RunningEffectConstants.m_instance, -1, "Active/desactive l'IA d'une cible et envoie des sorts \u00e0 l'ia", RunningEffectStatus.NEGATIVE);
        NULL_EFFECT = new RunningEffectDefinition(400, new NullEffect(), RunningEffectConstants.m_instance, -1, "Effet Vide", RunningEffectStatus.NEUTRAL);
        SPLIT_TRIGGER_EFFECT = new RunningEffectDefinition(401, new SplitTriggerEffect(), RunningEffectConstants.m_instance, -1, "Redirige une partie de l'effet d\u00e9clencheur vers la triggering target de l'effet (caster de l'effet redirig\u00e9 = triggering caster)", RunningEffectStatus.NEUTRAL);
        NULL_EFFECT_ON_CELL = new RunningEffectDefinition(402, new NullEffectOnCell(), RunningEffectConstants.m_instance, -1, "Effet Vide sur cellule", RunningEffectStatus.NEUTRAL);
        NULL_EFFECT_NOTIFIED_TO_AI = new RunningEffectDefinition(403, new NullEffectNotifiedToAI(), RunningEffectConstants.m_instance, -1, "Effet Vide notifi\u00e9 a l'ia", RunningEffectStatus.NEUTRAL);
        HP_LOSS_IN_PERCENT_MAX = new RunningEffectDefinition(411, new HPLoss(Elements.PHYSICAL, HPLoss.ComputeMode.PERCENT_OF_MAX_TARGET_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport au MAX de la cible (%)", RunningEffectStatus.NEGATIVE);
        HP_FIRE_LOSS_IN_PERCENT_MAX = new RunningEffectDefinition(412, new HPLoss(Elements.FIRE, HPLoss.ComputeMode.PERCENT_OF_MAX_TARGET_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport au MAX de la cible - Feu (%)", RunningEffectStatus.NEGATIVE);
        HP_EARTH_LOSS_IN_PERCENT_MAX = new RunningEffectDefinition(413, new HPLoss(Elements.EARTH, HPLoss.ComputeMode.PERCENT_OF_MAX_TARGET_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport au MAX de la cible - Terre (%)", RunningEffectStatus.NEGATIVE);
        HP_WATER_LOSS_IN_PERCENT_MAX = new RunningEffectDefinition(414, new HPLoss(Elements.WATER, HPLoss.ComputeMode.PERCENT_OF_MAX_TARGET_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport au MAX de la cible- Eau (%)", RunningEffectStatus.NEGATIVE);
        HP_AIR_LOSS_IN_PERCENT_MAX = new RunningEffectDefinition(415, new HPLoss(Elements.AIR, HPLoss.ComputeMode.PERCENT_OF_MAX_TARGET_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport au MAX de la cible - Air (%)", RunningEffectStatus.NEGATIVE);
        HP_LOSS_IN_PERCENT_CURRENT = new RunningEffectDefinition(416, new HPLoss(Elements.PHYSICAL, HPLoss.ComputeMode.PERCENT_OF_CURRENT_TARGET_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport \u00e0 la valeur courante de la cible (%)", RunningEffectStatus.NEGATIVE);
        HP_FIRE_LOSS_IN_PERCENT_CURRENT = new RunningEffectDefinition(417, new HPLoss(Elements.FIRE, HPLoss.ComputeMode.PERCENT_OF_CURRENT_TARGET_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport \u00e0 la valeur courante de la cible - Feu (%)", RunningEffectStatus.NEGATIVE);
        HP_EARTH_LOSS_IN_PERCENT_CURRENT = new RunningEffectDefinition(418, new HPLoss(Elements.EARTH, HPLoss.ComputeMode.PERCENT_OF_CURRENT_TARGET_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport \u00e0 la valeur courante de la cible - Terre (%)", RunningEffectStatus.NEGATIVE);
        HP_WATER_LOSS_IN_PERCENT_CURRENT = new RunningEffectDefinition(419, new HPLoss(Elements.WATER, HPLoss.ComputeMode.PERCENT_OF_CURRENT_TARGET_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport \u00e0 la valeur courante de la cible - Eau (%)", RunningEffectStatus.NEGATIVE);
        HP_AIR_LOSS_IN_PERCENT_CURRENT = new RunningEffectDefinition(420, new HPLoss(Elements.AIR, HPLoss.ComputeMode.PERCENT_OF_CURRENT_TARGET_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport \u00e0 la valeur courante de la cible - Air (%)", RunningEffectStatus.NEGATIVE);
        DECURSE = new RunningEffectDefinition(421, new DecurseStandardEffect(), RunningEffectConstants.m_instance, -1, "D\u00e9senvoutement", RunningEffectStatus.NEUTRAL);
        EXCHANGE_POSITION = new RunningEffectDefinition(422, new ExchangePosition(), RunningEffectConstants.m_instance, -1, "Echange de position", RunningEffectStatus.NEUTRAL);
        SPELL_ATTACK = new RunningEffectDefinition(426, new SpellAttack(), RunningEffectConstants.m_instance, -1, "Attaque avec un sort pass\u00e9 en param\u00e8tre", RunningEffectStatus.NEUTRAL);
        UPDATE_VALUE = new RunningEffectDefinition(430, new UpdateValue(), RunningEffectConstants.m_instance, -1, "Modifie la valeur de l'effet d\u00e9clencheur", RunningEffectStatus.NEUTRAL);
        KAMA_STEAL = new RunningEffectDefinition(431, new KamaSteal(), RunningEffectConstants.m_instance, -1, "Vol de Kamas", RunningEffectStatus.NEUTRAL);
        PICK_UP_ITEM = new RunningEffectDefinition(432, new PickUpItem(), RunningEffectConstants.m_instance, -1, "Tente de prendre un objet sur le sol", RunningEffectStatus.NEUTRAL);
        BOOST_SKILL_WITH_SPELL = new RunningEffectDefinition(433, new BoostSkillWithSpell(), RunningEffectConstants.m_instance, -1, "Boost le skill donn\u00e9 en param avec le level du sort qui lance cet effet", RunningEffectStatus.POSITIVE);
        KAMA_SHIELD = new RunningEffectDefinition(434, new KamaShield(), RunningEffectConstants.m_instance, -1, "Absorbe des d\u00e9g\u00e2ts subis et les converti en perte de Kamas", RunningEffectStatus.POSITIVE);
        UPDATE_TARGET_WITH_CARRIER = new RunningEffectDefinition(435, new UpdateTargetByOther(), RunningEffectConstants.m_instance, -1, "Met \u00e0 jour la cible de l'effet d\u00e9clench\u00e9. (par d\u00e9faut par le caster de cet effet)", RunningEffectStatus.NEUTRAL);
        VIRTUAL_ARMOR = new RunningEffectDefinition(436, new VirtualArmor(), RunningEffectConstants.m_instance, 1014, "Armure : absorbe une certaine quantit\u00e9 de d\u00e9gats d\u00e9finie puis se retire", RunningEffectStatus.POSITIVE);
        REVEAL_INVISIBILITY = new RunningEffectDefinition(438, new RevealInvisibility(), RunningEffectConstants.m_instance, -1, "Rev\u00e8le l'invisibilit\u00e9 \u00e0 tous (avec la petite fleche, n'enl\u00e8ve pas l'invisibilit\u00e9)", RunningEffectStatus.NEUTRAL);
        POISON_AP = new RunningEffectDefinition(440, new CharacPoison(FighterCharacteristicType.AP), RunningEffectConstants.m_instance, 1001, "Poison sur PA : Perte de PdV relative au nombre de PA utilis\u00e9 par l'action d\u00e9clenchante", RunningEffectStatus.NEGATIVE);
        POISON_MP = new RunningEffectDefinition(441, new CharacPoison(FighterCharacteristicType.MP), RunningEffectConstants.m_instance, 1001, "Poison sur PM : Perte de PdV relative au nombre de PM utilis\u00e9 par l'action d\u00e9clenchante", RunningEffectStatus.NEGATIVE);
        POISON_WP = new RunningEffectDefinition(442, new CharacPoison(FighterCharacteristicType.WP), RunningEffectConstants.m_instance, 1001, "Poison sur PW : Perte de PdV relative au nombre de PW utilis\u00e9 par l'action d\u00e9clenchante", RunningEffectStatus.NEGATIVE);
        UPDATE_CASTER_WITH_TARGET = new RunningEffectDefinition(443, new UpdateCasterByOther(), RunningEffectConstants.m_instance, -1, "Met \u00e0 jour le caster de l'effet d\u00e9clench\u00e9. (par d\u00e9faut par la cible de cet effet)", RunningEffectStatus.NEUTRAL);
        CONFUSED = new RunningEffectDefinition(444, new PropertyApply(FightPropertyType.CONFUSED), RunningEffectConstants.m_instance, -1, "Applique la propri\u00e9t\u00e9 CONFUSED (=> la cible ciblera toutes les cellules \u00e0 port\u00e9e dans l'IA)", RunningEffectStatus.NEGATIVE);
        IMMUNE_TO_EFFECTS = new RunningEffectDefinition(445, new PropertyApply(FightPropertyType.CANNOT_BE_EFFECT_TARGET), RunningEffectConstants.m_instance, -1, "Ne peut pas etre la cilbe d'un qcq effet", RunningEffectStatus.NEUTRAL);
        REMOVE_FIGHT_PROPERTY = new RunningEffectDefinition(446, new RemoveFightProperty(), RunningEffectConstants.m_instance, -1, "Retire une propri\u00e9t\u00e9 de combat", RunningEffectStatus.NEUTRAL);
        APPLY_FIGHT_PROPERTY = new RunningEffectDefinition(447, new ApplyFightProperty(), RunningEffectConstants.m_instance, -1, "Applique une propri\u00e9t\u00e9 de combat", RunningEffectStatus.NEUTRAL);
        POISON_TRIGERRING_VALUE = new RunningEffectDefinition(448, new TriggeringValuePoison(), RunningEffectConstants.m_instance, 1001, "Poison sur Triggering Value : Perte de PdV relative \u00e0 la valeur de l'effet de l'action d\u00e9clenchante", RunningEffectStatus.NEGATIVE);
        APPLY_WORLD_PROPERTY = new RunningEffectDefinition(449, new ApplyWorldProperty(), RunningEffectConstants.m_instance, -1, "Applique une propri\u00e9t\u00e9 de monde", RunningEffectStatus.NEUTRAL);
        PLAY_EMOTE = new RunningEffectDefinition(550, new PlayEmote(), RunningEffectConstants.m_instance, -1, "Demande l'\u00e9xcution d'un Emote", RunningEffectStatus.NEUTRAL);
        CHARAC_SET_DMG_AIR = new RunningEffectDefinition(560, new CharacSet(FighterCharacteristicType.DMG_AIR_PERCENT), RunningEffectConstants.m_instance, -1, "Fixe la characteristique Bonus D\u00e9g\u00e2ts - Air", RunningEffectStatus.NEUTRAL);
        CHARAC_SET_DMG_EARTH = new RunningEffectDefinition(561, new CharacSet(FighterCharacteristicType.DMG_EARTH_PERCENT), RunningEffectConstants.m_instance, -1, "Fixe la characteristique Bonus D\u00e9g\u00e2ts - Terre", RunningEffectStatus.NEUTRAL);
        CHARAC_SET_DMG_WATER = new RunningEffectDefinition(562, new CharacSet(FighterCharacteristicType.DMG_WATER_PERCENT), RunningEffectConstants.m_instance, -1, "Fixe la characteristique Bonus D\u00e9g\u00e2ts - Eau", RunningEffectStatus.NEUTRAL);
        CHARAC_SET_DMG_FIRE = new RunningEffectDefinition(563, new CharacSet(FighterCharacteristicType.DMG_FIRE_PERCENT), RunningEffectConstants.m_instance, -1, "Fixe la characteristique Bonus D\u00e9g\u00e2ts - Feu", RunningEffectStatus.NEUTRAL);
        HEAL_BOOST_PERCENT_FUNCTION_DMG_BONUS = new RunningEffectDefinition(564, new HealBoostPercentFunctionDmgBonus(), RunningEffectConstants.m_instance, -1, "Boost le bonus de soin en % en fonction des Bonus D\u00e9g\u00e2ts", RunningEffectStatus.POSITIVE);
        HP_BOOST_FUNCTION_DMG_BONUS = new RunningEffectDefinition(565, new HPBoostFunctionDmgBonus(), RunningEffectConstants.m_instance, -1, "Boost des PdV de la cible en fonction des Bonus D\u00e9g\u00e2ts \u00e9l\u00e9mentaires du caster", RunningEffectStatus.POSITIVE);
        CHARAC_SET_DMG_IN_PERCENT = new RunningEffectDefinition(566, new CharacSet(FighterCharacteristicType.DMG_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Fixe la characteristique Bonus D\u00e9g\u00e2ts en %", RunningEffectStatus.NEUTRAL);
        SET_OUT_FIGHT_HP_REGEN = new RunningEffectDefinition(567, new SetOutFightHpRegen(), RunningEffectConstants.m_instance, -1, "Fixe la characteristique de r\u00e9g\u00e9naration de pdv hors combat", RunningEffectStatus.NEUTRAL);
        CHARAC_SET_RES_AIR = new RunningEffectDefinition(568, new CharacSet(FighterCharacteristicType.RES_AIR_PERCENT), RunningEffectConstants.m_instance, -1, "Fixe la characteristique Bonus Res - Air", RunningEffectStatus.NEUTRAL);
        CHARAC_SET_RES_EARTH = new RunningEffectDefinition(569, new CharacSet(FighterCharacteristicType.RES_EARTH_PERCENT), RunningEffectConstants.m_instance, -1, "Fixe la characteristique Bonus Res - Terre", RunningEffectStatus.NEUTRAL);
        CHARAC_SET_RES_WATER = new RunningEffectDefinition(570, new CharacSet(FighterCharacteristicType.RES_WATER_PERCENT), RunningEffectConstants.m_instance, -1, "Fixe la characteristique Bonus Res - Eau", RunningEffectStatus.NEUTRAL);
        CHARAC_SET_RES_FIRE = new RunningEffectDefinition(571, new CharacSet(FighterCharacteristicType.RES_FIRE_PERCENT), RunningEffectConstants.m_instance, -1, "Fixe la characteristique Bonus Res - Feu", RunningEffectStatus.NEUTRAL);
        CHARAC_SET_RES_IN_PERCENT = new RunningEffectDefinition(572, new CharacSet(FighterCharacteristicType.RES_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Fixe la characteristique Bonus Res en %", RunningEffectStatus.NEUTRAL);
        CHARAC_SET_HEAL_IN_PERCENT = new RunningEffectDefinition(573, new CharacSet(FighterCharacteristicType.HEAL_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Fixe la characteristique Bonus au soin", RunningEffectStatus.NEUTRAL);
        CHARAC_SET_HP = new RunningEffectDefinition(574, new CharacSet(FighterCharacteristicType.HP), RunningEffectConstants.m_instance, -1, "Fixe les Hps de la cible", RunningEffectStatus.NEUTRAL);
        CHARAC_SET_AP_DBUFF_POWER = new RunningEffectDefinition(575, new CharacSet(FighterCharacteristicType.AP_DEBUFF_POWER), RunningEffectConstants.m_instance, -1, "Fixe la characteristique Bonus aux pertes de PA", RunningEffectStatus.NEUTRAL);
        HP_LOSS_IN_PERCENT_MAX_CASTER = new RunningEffectDefinition(620, new HPLoss(Elements.PHYSICAL, HPLoss.ComputeMode.PERCENT_OF_MAX_CASTER_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport au MAX du caster (%)", RunningEffectStatus.NEGATIVE);
        HP_FIRE_LOSS_IN_PERCENT_MAX_CASTER = new RunningEffectDefinition(621, new HPLoss(Elements.FIRE, HPLoss.ComputeMode.PERCENT_OF_MAX_CASTER_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport au MAX du caster - Feu (%)", RunningEffectStatus.NEGATIVE);
        HP_EARTH_LOSS_IN_PERCENT_MAX_CASTER = new RunningEffectDefinition(622, new HPLoss(Elements.EARTH, HPLoss.ComputeMode.PERCENT_OF_MAX_CASTER_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport au MAX du caster - Terre (%)", RunningEffectStatus.NEGATIVE);
        HP_WATER_LOSS_IN_PERCENT_MAX_CASTER = new RunningEffectDefinition(623, new HPLoss(Elements.WATER, HPLoss.ComputeMode.PERCENT_OF_MAX_CASTER_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV% par rapport au MAX du caster- Eau (%)", RunningEffectStatus.NEGATIVE);
        HP_AIR_LOSS_IN_PERCENT_MAX_CASTER = new RunningEffectDefinition(624, new HPLoss(Elements.AIR, HPLoss.ComputeMode.PERCENT_OF_MAX_CASTER_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport au MAX du caster - Air (%)", RunningEffectStatus.NEGATIVE);
        HP_LOSS_IN_PERCENT_CURRENT_CASTER = new RunningEffectDefinition(625, new HPLoss(Elements.PHYSICAL, HPLoss.ComputeMode.PERCENT_OF_CURRENT_CASTER_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport \u00e0 la valeur courante du caster (%)", RunningEffectStatus.NEGATIVE);
        HP_FIRE_LOSS_IN_PERCENT_CURRENT_CASTER = new RunningEffectDefinition(626, new HPLoss(Elements.FIRE, HPLoss.ComputeMode.PERCENT_OF_CURRENT_CASTER_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport \u00e0 la valeur courante du caster - Feu (%)", RunningEffectStatus.NEGATIVE);
        HP_EARTH_LOSS_IN_PERCENT_CURRENT_CASTER = new RunningEffectDefinition(627, new HPLoss(Elements.EARTH, HPLoss.ComputeMode.PERCENT_OF_CURRENT_CASTER_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport \u00e0 la valeur courante du caster - Terre (%)", RunningEffectStatus.NEGATIVE);
        HP_WATER_LOSS_IN_PERCENT_CURRENT_CASTER = new RunningEffectDefinition(628, new HPLoss(Elements.WATER, HPLoss.ComputeMode.PERCENT_OF_CURRENT_CASTER_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport \u00e0 la valeur courante du caster - Eau (%)", RunningEffectStatus.NEGATIVE);
        HP_AIR_LOSS_IN_PERCENT_CURRENT_CASTER = new RunningEffectDefinition(629, new HPLoss(Elements.AIR, HPLoss.ComputeMode.PERCENT_OF_CURRENT_CASTER_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport \u00e0 la valeur courante du caster - Air (%)", RunningEffectStatus.NEGATIVE);
        HP_LOSS_IN_PERCENT_CURRENT_CASTER_LIFE_LOST = new RunningEffectDefinition(630, new HPLoss(Elements.PHYSICAL, HPLoss.ComputeMode.PERCENT_OF_CURRENT_CASTER_NEGATIVE_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport aux PdV perdus par le caster (%)", RunningEffectStatus.NEGATIVE);
        HP_FIRE_LOSS_IN_PERCENT_CURRENT_CASTER_LIFE_LOST = new RunningEffectDefinition(631, new HPLoss(Elements.FIRE, HPLoss.ComputeMode.PERCENT_OF_CURRENT_CASTER_NEGATIVE_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport aux PdV perdus par le caster - Feu (%)", RunningEffectStatus.NEGATIVE);
        HP_EARTH_LOSS_IN_PERCENT_CURRENT_CASTER_LIFE_LOST = new RunningEffectDefinition(632, new HPLoss(Elements.EARTH, HPLoss.ComputeMode.PERCENT_OF_CURRENT_CASTER_NEGATIVE_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport aux PdV perdus par le caster - Terre (%)", RunningEffectStatus.NEGATIVE);
        HP_WATER_LOSS_IN_PERCENT_CURRENT_CASTER_LIFE_LOST = new RunningEffectDefinition(633, new HPLoss(Elements.WATER, HPLoss.ComputeMode.PERCENT_OF_CURRENT_CASTER_NEGATIVE_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport aux PdV perdus par le caster - Eau (%)", RunningEffectStatus.NEGATIVE);
        HP_AIR_LOSS_IN_PERCENT_CURRENT_CASTER_LIFE_LOST = new RunningEffectDefinition(634, new HPLoss(Elements.AIR, HPLoss.ComputeMode.PERCENT_OF_CURRENT_CASTER_NEGATIVE_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV  par rapport aux PdV perdus par le caster  - Air (%)", RunningEffectStatus.NEGATIVE);
        RANDOM_HP_AIR_LOSS = new RunningEffectDefinition(635, new RandomHPLoss(Elements.AIR), RunningEffectConstants.m_instance, -1, "Perte de PdV al\u00e9atoire - Air", RunningEffectStatus.NEGATIVE);
        RANDOM_HP_EARTH_LOSS = new RunningEffectDefinition(636, new RandomHPLoss(Elements.EARTH), RunningEffectConstants.m_instance, 1001, "Perte de PdV al\u00e9atoire - Terre", RunningEffectStatus.NEGATIVE);
        RANDOM_HP_FIRE_LOSS = new RunningEffectDefinition(637, new RandomHPLoss(Elements.FIRE), RunningEffectConstants.m_instance, 1001, "Perte de PdV al\u00e9atoire - Feu", RunningEffectStatus.NEGATIVE);
        RANDOM_HP_WATER_LOSS = new RunningEffectDefinition(638, new RandomHPLoss(Elements.WATER), RunningEffectConstants.m_instance, 1001, "Perte de PdV al\u00e9atoire - Eau", RunningEffectStatus.NEGATIVE);
        HP_LOSS_FUNCTION_PA_PM = new RunningEffectDefinition(639, new HpLossFunctionPaPm(), RunningEffectConstants.m_instance, 1001, "Perte de PdV Fonction des PA PM restants", RunningEffectStatus.NEGATIVE);
        ADD_SPELL_TO_INVENTORY = new RunningEffectDefinition(640, new AddSpellToInventory(), RunningEffectConstants.m_instance, -1, "Ajoute un sort a l'inventaire de la cible", RunningEffectStatus.NEUTRAL);
        INIT_LOSS_FUNCTION_PA_PM = new RunningEffectDefinition(641, new CharacLossFunctionPaPm(FighterCharacteristicType.INIT), RunningEffectConstants.m_instance, -1, "Perte d'Initiative Fonction des PA PM restants", RunningEffectStatus.NEGATIVE);
        HP_LOSS_IN_PERCENT_CURRENT_TARGET_LIFE_LOST = new RunningEffectDefinition(642, new HPLoss(Elements.PHYSICAL, HPLoss.ComputeMode.PERCENT_OF_CURRENT_TARGET_NEGATIVE_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport aux PdV perdus de la cible (%)", RunningEffectStatus.NEGATIVE);
        HP_FIRE_LOSS_IN_PERCENT_CURRENT_TARGET_LIFE_LOST = new RunningEffectDefinition(643, new HPLoss(Elements.FIRE, HPLoss.ComputeMode.PERCENT_OF_CURRENT_TARGET_NEGATIVE_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport aux PdV perdus de la cible - Feu (%)", RunningEffectStatus.NEGATIVE);
        HP_EARTH_LOSS_IN_PERCENT_CURRENT_TARGET_LIFE_LOST = new RunningEffectDefinition(644, new HPLoss(Elements.EARTH, HPLoss.ComputeMode.PERCENT_OF_CURRENT_TARGET_NEGATIVE_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport aux PdV perdus de la cible - Terre (%)", RunningEffectStatus.NEGATIVE);
        HP_WATER_LOSS_IN_PERCENT_CURRENT_TARGET_LIFE_LOST = new RunningEffectDefinition(645, new HPLoss(Elements.WATER, HPLoss.ComputeMode.PERCENT_OF_CURRENT_TARGET_NEGATIVE_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport aux PdV perdus de la cible - Eau (%)", RunningEffectStatus.NEGATIVE);
        HP_AIR_LOSS_IN_PERCENT_CURRENT_TARGET_LIFE_LOST = new RunningEffectDefinition(646, new HPLoss(Elements.AIR, HPLoss.ComputeMode.PERCENT_OF_CURRENT_TARGET_NEGATIVE_HP), RunningEffectConstants.m_instance, 1001, "Perte de PdV  par rapport aux PdV perdus de la cible  - Air (%)", RunningEffectStatus.NEGATIVE);
        HP_LOSS_FUNCTION_PA_PM_WITHOUT_CONSUME_EARTH = new RunningEffectDefinition(647, new HpLossFctPaPmWithoutConsume(Elements.EARTH, HPLoss.ComputeMode.CLASSIC), RunningEffectConstants.m_instance, 1001, "Perte de PdV Terre Fonction des PA PM restants sans les consommer", RunningEffectStatus.NEGATIVE);
        HP_LOSS_FUNCTION_PA_PM_WITHOUT_CONSUME_FIRE = new RunningEffectDefinition(648, new HpLossFctPaPmWithoutConsume(Elements.FIRE, HPLoss.ComputeMode.CLASSIC), RunningEffectConstants.m_instance, 1001, "Perte de PdV Feu Fonction des PA PM restants sans les consommer", RunningEffectStatus.NEGATIVE);
        RESOURCEFULNESS_GAIN = new RunningEffectDefinition(700, new CharacGain(FighterCharacteristicType.OCCUPATION_RESOURCEFULNESS), RunningEffectConstants.m_instance, -1, "Augmente la quantit\u00e9 de ressources r\u00e9colt\u00e9es", RunningEffectStatus.POSITIVE);
        CRAFT_QUICKNESS_GAIN = new RunningEffectDefinition(702, new CharacGain(FighterCharacteristicType.OCCUPATION_CRAFT_QUICKNESS), RunningEffectConstants.m_instance, -1, "R\u00e9duit la dur\u00e9e de r\u00e9alisation des recettes", RunningEffectStatus.POSITIVE);
        QUICK_LEARNER_HARVEST_GAIN = new RunningEffectDefinition(705, new CharacGain(FighterCharacteristicType.OCCUPATION_QUICK_LEARNER_HARVEST), RunningEffectConstants.m_instance, -1, "Augmente l'exp\u00e9rience tir\u00e9e des r\u00e9coltes", RunningEffectStatus.POSITIVE);
        QUICK_LEARNER_CRAFT_GAIN = new RunningEffectDefinition(706, new CharacGain(FighterCharacteristicType.OCCUPATION_QUICK_LEARNER_CRAFT), RunningEffectConstants.m_instance, -1, "Augmente l'exp\u00e9rience tir\u00e9e de la r\u00e9alisation de recettes", RunningEffectStatus.POSITIVE);
        GREEN_THUMBS_GAIN = new RunningEffectDefinition(707, new CharacGain(FighterCharacteristicType.OCCUPATION_GREEN_THUMBS), RunningEffectConstants.m_instance, -1, "Augmente les chances de r\u00e9ussite des plantations", RunningEffectStatus.POSITIVE);
        ECOSYSTEM_SKILL_MODIFICATION = new RunningEffectDefinition(708, new EcosystemSkillModification(), RunningEffectConstants.m_instance, -1, "Modifie une charac li\u00e9 au skill d'ecosysteme", RunningEffectStatus.NEUTRAL);
        CRAFT_SKILL_MODIFICATION = new RunningEffectDefinition(709, new CraftSkillModification(), RunningEffectConstants.m_instance, -1, "Modifie une charac li\u00e9 au skill de craft", RunningEffectStatus.NEUTRAL);
        RESOURCEFULNESS_LOSS = new RunningEffectDefinition(710, new CharacLoss(FighterCharacteristicType.OCCUPATION_RESOURCEFULNESS), RunningEffectConstants.m_instance, -1, "Diminue la quantit\u00e9 de ressources r\u00e9colt\u00e9es", RunningEffectStatus.POSITIVE);
        GET_TITLE = new RunningEffectDefinition(800, new GetPlayerTitle(), RunningEffectConstants.m_instance, -1, "Ajoute un titre au joueur", RunningEffectStatus.NEUTRAL);
        HP_LOSS_AND_PUPPET_HEAL = new RunningEffectDefinition(801, new HpLossAndPuppetHeal(), RunningEffectConstants.m_instance, -1, "Inflige de degats et fait gagner des PdV aux poup\u00e9es", RunningEffectStatus.NEUTRAL);
        LINK_CASTER_AND_TARGET = new RunningEffectDefinition(802, new LinkCasterAndTarget(), RunningEffectConstants.m_instance, -1, "Lie le caster et la cible", RunningEffectStatus.NEUTRAL);
        CHANGE_SPELL_TARGET_CELL = new RunningEffectDefinition(803, new ChangeSpellTargetCell(), RunningEffectConstants.m_instance, -1, "Modifie la cellule cibl\u00e9e par un sort", RunningEffectStatus.NEUTRAL);
        SET_CHANGE_SPELL_TARGET_CELL_AREA = new RunningEffectDefinition(804, new SetChangeSpellTargetCellArea(), RunningEffectConstants.m_instance, -1, "Pose un tunnel de sort", RunningEffectStatus.NEUTRAL);
        ENUTROF_DEPOSIT_PLACEMENT = new RunningEffectDefinition(805, new EnutrofDepositPlacement(), RunningEffectConstants.m_instance, -1, "Place les gisements de l'enutrof", RunningEffectStatus.NEUTRAL);
        REMOVE_OWN_DEPOSIT = new RunningEffectDefinition(807, new RemoveOwnDeposit(), RunningEffectConstants.m_instance, -1, "Retire les gisements du caster sous la cellule cibl\u00e9e", RunningEffectStatus.NEUTRAL);
        AP_AS_MP = new RunningEffectDefinition(808, new ApAsMp(), RunningEffectConstants.m_instance, -1, "Transforme les PA en PM", RunningEffectStatus.NEUTRAL);
        FAKE_KO = new RunningEffectDefinition(809, new FakeKo(), RunningEffectConstants.m_instance, -1, "Ko jusqu'a la desapplication", RunningEffectStatus.NEUTRAL);
        HP_LOSS_NORMAL_DISTRIB_EARTH = new RunningEffectDefinition(810, new HpLossNormalDistrib(Elements.EARTH), RunningEffectConstants.m_instance, 1001, "Perte de PdV Terre al\u00e9atoire selon une loi normale", RunningEffectStatus.NEGATIVE);
        CHARAC_GAIN_BASED_ON_OTHER_CHARAC_VALUE = new RunningEffectDefinition(812, new CharacGainBasedOnOtherCharacValue(), RunningEffectConstants.m_instance, -1, "Gain charac en fonction d'une autre", RunningEffectStatus.NEUTRAL);
        SET_LOOT_EFFECT_AREA = new RunningEffectDefinition(813, new SetLootEffectArea(), RunningEffectConstants.m_instance, -1, "Pose une zone de loot", RunningEffectStatus.NEUTRAL);
        DROP_FROM_LOOT_AREA = new RunningEffectDefinition(814, new DropFromLootArea(), RunningEffectConstants.m_instance, 1016, "Recupere un objet dans une zone de loot", RunningEffectStatus.NEUTRAL);
        HP_LOSS_FROM_LOOT_AREA = new RunningEffectDefinition(815, new HpLossFromLootArea(), RunningEffectConstants.m_instance, 1016, "Perte de point de vie sur une zone de loot", RunningEffectStatus.NEUTRAL);
        COLLECT_FOR_CONTROLLER = new RunningEffectDefinition(816, new CollectForController(), RunningEffectConstants.m_instance, -1, "Ramasse un objet pour son controller", RunningEffectStatus.NEUTRAL);
        REPLACE_AREA_BY_ANOTHER = new RunningEffectDefinition(817, new ReplaceAreaByAnother(), RunningEffectConstants.m_instance, -1, "Remplace une zone d'effet sur la cellule par une autre", RunningEffectStatus.NEUTRAL);
        HP_LOSS_FUNCTION_LOOT = new RunningEffectDefinition(818, new HpLossFunctionLoot(), RunningEffectConstants.m_instance, 1016, "Perte de point de vie en fonction d'un loot", RunningEffectStatus.NEUTRAL);
        CHRAGE_BUFF = new RunningEffectDefinition(819, new CharacBuff(FighterCharacteristicType.CHRAGE), RunningEffectConstants.m_instance, -1, "Augmente le max de chrage", RunningEffectStatus.NEUTRAL);
        HP_LOSS_AFTER_MOVEMENT = new RunningEffectDefinition(825, new HpLossAfterMovement(), RunningEffectConstants.m_instance, -1, "Fait perdre de Pdv apres un effet de deplacement", RunningEffectStatus.NEGATIVE);
        DROP_FOR_ENUTROF_BLESSING = new RunningEffectDefinition(828, new DropForEnutrofBlessing(), RunningEffectConstants.m_instance, -1, "Drop de b\u00e9n\u00e9diction Enutrof", RunningEffectStatus.POSITIVE);
        INSTANT_KO = new RunningEffectDefinition(830, new InstantKO(), RunningEffectConstants.m_instance, -1, "Ko Instantan\u00e9", RunningEffectStatus.NEGATIVE);
        BLITZKRIEK_EFFECT = new RunningEffectDefinition(831, new BlitzkriekEffect(), RunningEffectConstants.m_instance, -1, "Effet de Blitzkriek", RunningEffectStatus.NEGATIVE);
        ELEMENT_SPELL_GAIN = new RunningEffectDefinition(832, new ElementalSpellGain(), RunningEffectConstants.m_instance, -1, "Gain de niveaux de sorts dans une branche", RunningEffectStatus.NEGATIVE);
        DOUBLE_OR_QUITS = new RunningEffectDefinition(833, new DoubleOrQuits(), RunningEffectConstants.m_instance, -1, "Quitte ou double", RunningEffectStatus.NEUTRAL);
        BOOST_VOODOOL_DMG = new RunningEffectDefinition(834, new CharacGain(FighterCharacteristicType.VOODOOL_HP_LOSS_BONUS), RunningEffectConstants.m_instance, -1, "Booste les dmg via totem", RunningEffectStatus.POSITIVE);
        VOODOOL_SPLIT_EFFECT = new RunningEffectDefinition(835, new VoodoolSplitEffect(), RunningEffectConstants.m_instance, -1, "Redirige les dmg vers le perso li\u00e9 au totem", RunningEffectStatus.NEUTRAL);
        VOODOOL_BOOST_EFFECT = new RunningEffectDefinition(836, new VoodoolBoostEffect(), RunningEffectConstants.m_instance, -1, "Execute le boost de dmg lie au totem", RunningEffectStatus.NEUTRAL);
        HP_GAIN_RANDOM_PERCENT_OF_VALUE = new RunningEffectDefinition(837, new HpGainRandomPercentOfValue(), RunningEffectConstants.m_instance, -1, "Soin xdy+z", RunningEffectStatus.NEUTRAL);
        SUMMONING_MASTERY = new RunningEffectDefinition(838, new CharacGain(FighterCharacteristicType.SUMMONING_MASTERY), RunningEffectConstants.m_instance, -1, "Gain aux d\u00e9gats des CMC", RunningEffectStatus.POSITIVE);
        SUMMON_DOUBLE_FOR_BELLAPHONE = new RunningEffectDefinition(839, new SummonDoubleForBellaphone(), RunningEffectConstants.m_instance, -1, "Invocation de double pour les bellaphones", RunningEffectStatus.POSITIVE);
        BOMB_COOLDOWN_DECREASE = new RunningEffectDefinition(840, new CharacLoss(FighterCharacteristicType.BOMB_COOLDOWN), RunningEffectConstants.m_instance, -1, "D\u00e9cremente le cooldown des bombes", RunningEffectStatus.NEUTRAL);
        BOMB_COOLDOWN_BUFF = new RunningEffectDefinition(841, new CharacBuff(FighterCharacteristicType.BOMB_COOLDOWN), RunningEffectConstants.m_instance, -1, "Augmente le cooldown des bombes", RunningEffectStatus.NEUTRAL);
        SET_BARREL = new RunningEffectDefinition(842, new SetEffectArea(), RunningEffectConstants.m_instance, -1, "Pose le tonneau", RunningEffectStatus.NEUTRAL);
        REMOVE_AREA_USING_TARGET = new RunningEffectDefinition(843, new RemoveAreaUsingTarget(), RunningEffectConstants.m_instance, -1, "Retire une zone en s\u00e9lectionnant la zone comme cible", RunningEffectStatus.NEUTRAL);
        RUNNING_EFFECT_GROUP_LEVEL_FUNCTION_STATE = new RunningEffectDefinition(844, new RunningEffectGroupLevelFunctionState(), RunningEffectConstants.m_instance, -1, "Groupe d'effet avec niveau des enfants fonction de l'etat pass\u00e9 en parametre", RunningEffectStatus.NEUTRAL);
        STATE_GENERIC_APPLICATION_BONUS = new RunningEffectDefinition(845, new CharacGain(FighterCharacteristicType.STATE_APPLICATION_BONUS), RunningEffectConstants.m_instance, -1, "Modifie les chances d'appliquer des \u00e9tats", RunningEffectStatus.NEUTRAL);
        STATE_RESISTANCE_BONUS = new RunningEffectDefinition(846, new CharacGain(FighterCharacteristicType.STATE_RESISTANCE_BONUS), RunningEffectConstants.m_instance, -1, "Modifie la r\u00e9sistance aux \u00e9tats", RunningEffectStatus.NEUTRAL);
        HP_LOSS_THEN_HP_LOSS_FUNCTION_PREVIOUS_VALUE_EARTH = new RunningEffectDefinition(847, new HpLossThenHpLossFunctionPreviousValue(Elements.EARTH, HPLoss.ComputeMode.CLASSIC), RunningEffectConstants.m_instance, 1001, "Perte de Pdv + % des d\u00e9g\u00e2ts subis (terre)", RunningEffectStatus.NEUTRAL);
        ARMOR_PLATE_BONUS_GAIN = new RunningEffectDefinition(849, new CharacGain(FighterCharacteristicType.ARMOR_PLATE_BONUS), RunningEffectConstants.m_instance, -1, "Augmente le nombre de plaques des armures", RunningEffectStatus.NEUTRAL);
        FECA_GLYPH_CHARGE_BONUS_GAIN = new RunningEffectDefinition(850, new CharacGain(FighterCharacteristicType.FECA_GLYPH_CHARGE_BONUS), RunningEffectConstants.m_instance, -1, "Augmente le nombre de charge des glyphes", RunningEffectStatus.NEUTRAL);
        HP_LOSS_FUNCTION_CHARAC = new RunningEffectDefinition(851, new HpLossFunctionCharac(Elements.PHYSICAL, HPLoss.ComputeMode.CLASSIC, FighterCharacteristicType.HP), RunningEffectConstants.m_instance, 1001, "Perte de pdv en fonction de Hp du caster", RunningEffectStatus.NEUTRAL);
        INVERT_DMG_AND_RES = new RunningEffectDefinition(852, new PropertyApply(FightPropertyType.INVERT_DMG_AND_RES), RunningEffectConstants.m_instance, -1, "Inverse les dmg avec les resistances", RunningEffectStatus.NEUTRAL);
        HP_LOSS_FUNCTION_TRIGGERING_VALUE = new RunningEffectDefinition(853, new HpLossFunctionTriggeringValue(), RunningEffectConstants.m_instance, 1001, "Perte de PdV en fonction de l'effet d\u00e9clencheur", RunningEffectStatus.NEGATIVE);
        APPLY_CANT_BE_PUSH_OR_PULLED = new RunningEffectDefinition(854, new PropertyApply(FightPropertyType.CANT_BE_PUSH_OR_PULLED), RunningEffectConstants.m_instance, -1, "Ne peux pas \u00eatre pouss\u00e9 ou tir\u00e9", RunningEffectStatus.NEUTRAL);
        RUNNING_EFFECT_GROUP_WITH_AT_LEAST_NULL_EFFECT = new RunningEffectDefinition(855, new RunningEffectGroupWithAtLeastNullEffect(), RunningEffectConstants.m_instance, -1, "Groupe d'effet avec execution du dernier NullEffect si rien d'autre", RunningEffectStatus.NEUTRAL);
        PM_TRANSFER_TO_TARGETS = new RunningEffectDefinition(856, new CharacTransferToTargets(FighterCharacteristicType.MP, RunningEffectConstants.MP_BOOST, RunningEffectConstants.MP_LOSS), RunningEffectConstants.m_instance, -1, "Transfert de PM aux cibles", RunningEffectStatus.NEUTRAL);
        TACKLE_TRANSFER_TO_TARGETS = new RunningEffectDefinition(857, new CharacTransferToTargets(FighterCharacteristicType.TACKLE, RunningEffectConstants.TACKLE_GAIN, RunningEffectConstants.TACKLE_LOSS, true), RunningEffectConstants.m_instance, -1, "Transfert de Tacle aux cibles", RunningEffectStatus.NEUTRAL);
        DODGE_TRANSFER_TO_TARGETS = new RunningEffectDefinition(858, new CharacTransferToTargets(FighterCharacteristicType.DODGE, RunningEffectConstants.DODGE_GAIN, RunningEffectConstants.DODGE_LOSS, true), RunningEffectConstants.m_instance, -1, "Transfert d'Esquive aux cibles", RunningEffectStatus.NEUTRAL);
        BRING_BACK_TO_OWNER_SYMBIOT = new RunningEffectDefinition(859, new BringBackToControllerSymbiot(), RunningEffectConstants.m_instance, -1, "Retourne la cr\u00e9ature dans le symbiote du controleur", RunningEffectStatus.NEUTRAL);
        CHANGE_LEVEL = new RunningEffectDefinition(860, new ChangeLevel(), RunningEffectConstants.m_instance, -1, "Change le level du gobgob en fonction de celui de la cible", RunningEffectStatus.NEUTRAL);
        OSA_INIT_GAIN = new RunningEffectDefinition(861, new CharacGainForOsaFusion(FighterCharacteristicType.INIT), RunningEffectConstants.m_instance, -1, "Gain d'init fct du level du gobgob", RunningEffectStatus.NEUTRAL);
        OSA_CC_GAIN = new RunningEffectDefinition(862, new CharacGainForOsaFusion(FighterCharacteristicType.FEROCITY), RunningEffectConstants.m_instance, -1, "Gain de cc fct du level du gobgob", RunningEffectStatus.NEUTRAL);
        OSA_DODGE_GAIN = new RunningEffectDefinition(863, new CharacGainForOsaFusion(FighterCharacteristicType.DODGE), RunningEffectConstants.m_instance, -1, "Gain d'esquive fct du level du gobgob", RunningEffectStatus.NEUTRAL);
        OSA_TACKLE_GAIN = new RunningEffectDefinition(864, new CharacGainForOsaFusion(FighterCharacteristicType.TACKLE), RunningEffectConstants.m_instance, -1, "Gain de tacle fct du level du gobgob", RunningEffectStatus.NEUTRAL);
        GROUP_SECOND_VALUE_FUNCTION_FIRST = new RunningEffectDefinition(865, new RunningEffectGroupSecondValueFunctionFirst(), RunningEffectConstants.m_instance, -1, "Groupe d'effet : valeur du second effet fonction de celle du premier (2 effets maxi dans le groupe)", RunningEffectStatus.NEUTRAL);
        PERCEPTION_GAIN = new RunningEffectDefinition(866, new CharacGain(FighterCharacteristicType.PERCEPTION), RunningEffectConstants.m_instance, -1, "Gain de perception", RunningEffectStatus.NEUTRAL);
        PERCEPTION_LOSS = new RunningEffectDefinition(867, new CharacLoss(FighterCharacteristicType.PERCEPTION), RunningEffectConstants.m_instance, -1, "Perte de perception", RunningEffectStatus.NEUTRAL);
        FINAL_DMG_GAIN_FUNCTION_STATE_LEVEL = new RunningEffectDefinition(868, new CharacGainFunctionStateLevel(FighterCharacteristicType.FINAL_DMG_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Gain aux d\u00e9g\u00e2ts finaux en fonction du niveau d'un \u00e9tat", RunningEffectStatus.POSITIVE);
        OSA_DMG_GAIN = new RunningEffectDefinition(869, new CharacGainForOsaFusion(FighterCharacteristicType.DMG_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Gain de d\u00e9gats fct du level du gobgob", RunningEffectStatus.NEUTRAL);
        OSA_AP_GAIN = new RunningEffectDefinition(870, new CharacBuffForOsaFusion(FighterCharacteristicType.MP), RunningEffectConstants.m_instance, -1, "Buff de PM fct du level du gobgob", RunningEffectStatus.NEUTRAL);
        OSA_MP_GAIN = new RunningEffectDefinition(871, new CharacBuffForOsaFusion(FighterCharacteristicType.AP), RunningEffectConstants.m_instance, -1, "Buff de PA fct du level du gobgob", RunningEffectStatus.NEUTRAL);
        WILLPOWER_GAIN = new RunningEffectDefinition(872, new CharacGain(FighterCharacteristicType.WILLPOWER), RunningEffectConstants.m_instance, -1, "Augmente la Volont\u00e9", RunningEffectStatus.NEUTRAL);
        WILLPOWER_LOSS = new RunningEffectDefinition(873, new CharacLoss(FighterCharacteristicType.WILLPOWER), RunningEffectConstants.m_instance, -1, "Diminue la Volont\u00e9", RunningEffectStatus.NEUTRAL);
        OSA_RANGE_GAIN = new RunningEffectDefinition(874, new CharacGainForOsaFusion(FighterCharacteristicType.RANGE), RunningEffectConstants.m_instance, -1, "Gain de PO fct du level du gobgob", RunningEffectStatus.NEUTRAL);
        BLOCK_GAIN = new RunningEffectDefinition(875, new CharacGain(FighterCharacteristicType.BLOCK), RunningEffectConstants.m_instance, -1, "Augmente la Parade", RunningEffectStatus.NEUTRAL);
        BLOCK_LOSS = new RunningEffectDefinition(876, new CharacLoss(FighterCharacteristicType.BLOCK), RunningEffectConstants.m_instance, -1, "Diminue la Parade", RunningEffectStatus.NEUTRAL);
        HP_MIN_MODIFICATION = new RunningEffectDefinition(877, new CharacMinModification(FighterCharacteristicType.HP), RunningEffectConstants.m_instance, -1, "Modifie le min de Hp", RunningEffectStatus.NEUTRAL);
        MOVE_AWAY_FROM_CELL = new RunningEffectDefinition(878, new MoveAwayFromCell(), RunningEffectConstants.m_instance, 1033, "S'\u00e9loigne de la cellule cibl\u00e9e", RunningEffectStatus.NEUTRAL);
        VIRTUAL_ARMOR_BONUS_GAIN = new RunningEffectDefinition(879, new CharacGain(FighterCharacteristicType.VIRTUAL_ARMOR_BONUS), RunningEffectConstants.m_instance, -1, "Donne un bonus \u00e0 l'armure (effet 436)", RunningEffectStatus.NEUTRAL);
        AREA_HP_LOSS = new RunningEffectDefinition(880, new CharacLoss(FighterCharacteristicType.AREA_HP), RunningEffectConstants.m_instance, 1031, "Perte de PdV pour zone d'effet", RunningEffectStatus.NEUTRAL);
        EFFECT_VALUE_FUNCTION_FECA_ARMOR = new RunningEffectDefinition(881, new EffectValueFunctionCasterCharac(FighterCharacteristicType.ARMOR_PLATE), RunningEffectConstants.m_instance, -1, "Groupe d'effet avec la valeur fonction du nombre de plaque", RunningEffectStatus.NEUTRAL);
        EFFECT_VALUE_FUNCTION_GLYPH_CHARGE = new RunningEffectDefinition(882, new EffectValueFunctionCasterCharac(FighterCharacteristicType.AREA_HP), RunningEffectConstants.m_instance, -1, "Groupe d'effet avec la valeur fonction du nombre de charge du glyphe", RunningEffectStatus.NEUTRAL);
        RES_AP_LOSS = new RunningEffectDefinition(884, new CharacLoss(FighterCharacteristicType.AP_DEBUFF_RES), RunningEffectConstants.m_instance, -1, "Perte de r\u00e9sistance au deboost de PA", RunningEffectStatus.NEGATIVE);
        RES_MP_LOSS = new RunningEffectDefinition(885, new CharacLoss(FighterCharacteristicType.MP_DEBUFF_RES), RunningEffectConstants.m_instance, -1, "Perte de r\u00e9sistance au deboost de PM", RunningEffectStatus.POSITIVE);
        RUNNING_EFFECT_GROUP_PROBA_FUNCTION_PA_PM_PW = new RunningEffectDefinition(886, new RunningEffectGroupProbabilityFunctionPaPmPw(), RunningEffectConstants.m_instance, -1, "Groupe d'effet dont la proba globale d'ex\u00e9cution est fct des PA/PM/PW restants", RunningEffectStatus.NEUTRAL);
        EFFECT_PROBA_FUNCTION_GLYPH_CHARGE = new RunningEffectDefinition(887, new EffectProbaFunctionCasterCharac(FighterCharacteristicType.AREA_HP), RunningEffectConstants.m_instance, -1, "Groupe d'effet dont la proba d'executer le groupe est fonction du nombre de charge", RunningEffectStatus.NEUTRAL);
        EFFECT_PROBA_FUNCTION_ARMOR_PLATE = new RunningEffectDefinition(892, new EffectProbaFunctionCasterCharac(FighterCharacteristicType.ARMOR_PLATE), RunningEffectConstants.m_instance, -1, "Groupe d'effet dont la proba d'executer le groupe est fonction du nombre de plaque", RunningEffectStatus.NEUTRAL);
        MODIFY_SUB_EFFECT_BY_CHRAGE = new RunningEffectDefinition(894, new ModifySubEffectValueByCasterCharac(FighterCharacteristicType.AREA_HP), RunningEffectConstants.m_instance, -1, "Modifie en % la valeur du sous effet en fonction du nombre de charge", RunningEffectStatus.NEUTRAL);
        MODIFY_SUB_EFFECT_BY_TARGET_PLATE = new RunningEffectDefinition(895, new ModifySubEffectValueByTargetCharac(FighterCharacteristicType.ARMOR_PLATE), RunningEffectConstants.m_instance, -1, "Modifie en % la valeur du sous effet en fonction du nombre de plaque de la cible", RunningEffectStatus.NEUTRAL);
        RANDOM_IN_AREA_BY_AREA_HP = new RunningEffectDefinition(896, new RunningEffectGroupEffectRandomInAreaByAreaHp(), RunningEffectConstants.m_instance, -1, "Groupe d'effets al\u00e9atoire sur les cellules de la zone * nombre de charge restantes ", RunningEffectStatus.NEUTRAL);
        APPLY_STATE_PERCENT_FUNCTION_AREA_HP = new RunningEffectDefinition(897, new ApplyStatePercentFunctionAreaHp(), RunningEffectConstants.m_instance, -1, "Applique un etat dont le % d'application est fontion du nombre de charge restantes", RunningEffectStatus.NEUTRAL);
        DMG_WATER_MODIFIED_BY_ARMOR_PLATE = new RunningEffectDefinition(900, new CharacModifiedByAnother(FighterCharacteristicType.ARMOR_PLATE, FighterCharacteristicType.DMG_WATER_PERCENT), RunningEffectConstants.m_instance, -1, "D\u00e9g\u00e2ts eau modifi\u00e9s par le nombre de plaque", RunningEffectStatus.NEUTRAL);
        DMG_AIR_MODIFIED_BY_ARMOR_PLATE = new RunningEffectDefinition(901, new CharacModifiedByAnother(FighterCharacteristicType.ARMOR_PLATE, FighterCharacteristicType.DMG_AIR_PERCENT), RunningEffectConstants.m_instance, -1, "D\u00e9g\u00e2ts air modifi\u00e9s par le nombre de plaque", RunningEffectStatus.NEUTRAL);
        DMG_EARTH_MODIFIED_BY_ARMOR_PLATE = new RunningEffectDefinition(902, new CharacModifiedByAnother(FighterCharacteristicType.ARMOR_PLATE, FighterCharacteristicType.DMG_EARTH_PERCENT), RunningEffectConstants.m_instance, -1, "D\u00e9g\u00e2ts terre modifi\u00e9s par le nombre de plaque", RunningEffectStatus.NEUTRAL);
        DMG_FIRE_MODIFIED_BY_ARMOR_PLATE = new RunningEffectDefinition(903, new CharacModifiedByAnother(FighterCharacteristicType.ARMOR_PLATE, FighterCharacteristicType.DMG_FIRE_PERCENT), RunningEffectConstants.m_instance, -1, "D\u00e9g\u00e2ts feu modifi\u00e9s par le nombre de plaque", RunningEffectStatus.NEUTRAL);
        RUNNING_EFFECT_GROUP_PROBA_FUNCTION_STATE_LEVEL = new RunningEffectDefinition(904, new RunningEffectGroupProbabilityFunctionStateLevel(), RunningEffectConstants.m_instance, -1, "Groupe d'effet dont la proba globale d'ex\u00e9cution est fct du niveau d'un \u00e9tat", RunningEffectStatus.NEUTRAL);
        MODIFY_SUB_EFFECT_BY_ARMOR_PLATE = new RunningEffectDefinition(905, new ModifySubEffectValueByCasterCharac(FighterCharacteristicType.ARMOR_PLATE), RunningEffectConstants.m_instance, -1, "Modifie en % la valeur du sous effet en fonction du nombre de plaque", RunningEffectStatus.NEUTRAL);
        REG_EXECUTION_COUNT_FUNCTION_AREA_HP = new RunningEffectDefinition(906, new REGExecutionCountFunctionCharac(FighterCharacteristicType.AREA_HP), RunningEffectConstants.m_instance, -1, "Execute le groupe autant de fois que le caster a de AREA_HP", RunningEffectStatus.NEUTRAL);
        AREA_HP_BUFF = new RunningEffectDefinition(907, new CharacBuff(FighterCharacteristicType.AREA_HP), RunningEffectConstants.m_instance, -1, "Buff de AREA_HP", RunningEffectStatus.NEUTRAL);
        MODIFY_DMG_IN_PERCENT_FUNTION_PROSPECTION = new RunningEffectDefinition(908, new CharacModifiedByAnother(FighterCharacteristicType.PROSPECTION, FighterCharacteristicType.DMG_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Modification des DMG en fonction de la prospection", RunningEffectStatus.NEUTRAL);
        REPLACE_AREA_BY_ANOTHER_USING_TARGET = new RunningEffectDefinition(909, new ReplaceAreaByAnotherUsingTarget(), RunningEffectConstants.m_instance, -1, "Remplace une zone par une autre en s\u00e9lectionnant la zone comme cible", RunningEffectStatus.NEUTRAL);
        RUNNING_EFFECT_GROUP_LEVEL_FUNCTION_TRIGGERING_SPELL_COST = new RunningEffectDefinition(910, new RunningEffectGroupLevelFunctionTriggeringSpell(), RunningEffectConstants.m_instance, -1, "Groupe d'effet avec niveau des enfants fonction du cout du sort d\u00e9clencheur", RunningEffectStatus.NEUTRAL);
        REMOVE_AREA_USING_TARGET_CELL = new RunningEffectDefinition(911, new RemoveArea(), RunningEffectConstants.m_instance, -1, "Retire une zone d'effet sur la cellule", RunningEffectStatus.NEUTRAL);
        RUNNING_EFFECT_GROUP_LEVEL_FUNCTION_TRIGGERING_ACTION_COST = new RunningEffectDefinition(912, new RunningEffectGroupLevelFunctionTriggeringActionCost(), RunningEffectConstants.m_instance, -1, "Groupe d'effet avec niveau des enfants fonction de l'action cost d\u00e9clencheur", RunningEffectStatus.NEUTRAL);
        RUNNING_EFFECT_GROUP_LEVEL_FUNCTION_CHARACTERISTIC = new RunningEffectDefinition(913, new RunningEffectGroupLevelFunctionCharacteristic(), RunningEffectConstants.m_instance, -1, "Groupe d'effet avec niveau des enfants fonction de la carac pass\u00e9e en parametre", RunningEffectStatus.NEUTRAL);
        BOMB_COOLDOWN_LOSS_FUNCTION_PA_PM = new RunningEffectDefinition(914, new CharacLossFunctionPaPm(FighterCharacteristicType.BOMB_COOLDOWN), RunningEffectConstants.m_instance, -1, "Perte de cooldown fonction des PA PM restants", RunningEffectStatus.NEUTRAL);
        EXECUTE_TRIGGER_IN_EFFECT_ZONE = new RunningEffectDefinition(915, new ExecuteTriggeringEffectInEffectZone(), RunningEffectConstants.m_instance, -1, "Recalcule l'effet d\u00e9clencheur dans la zone de cet effet", RunningEffectStatus.NEUTRAL);
        MODIFY_DMG_IN_PERCENT_FUNCTION_INITIATIVE = new RunningEffectDefinition(916, new CharacModifiedByAnother(FighterCharacteristicType.INIT, FighterCharacteristicType.DMG_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Modification des DMG All en fonction de l'init", RunningEffectStatus.NEUTRAL);
        HP_STASIS_LOSS = new RunningEffectDefinition(917, new HPLoss(Elements.STASIS, HPLoss.ComputeMode.CLASSIC), RunningEffectConstants.m_instance, 1001, "Perte de PdV - Stasis", RunningEffectStatus.NEGATIVE);
        DMG_STASIS_GAIN_PERCENT = new RunningEffectDefinition(918, new CharacGain(FighterCharacteristicType.DMG_STASIS_PERCENT), RunningEffectConstants.m_instance, -1, "Gain aux d\u00e9g\u00e2ts - Stasis (%)", RunningEffectStatus.POSITIVE);
        ROLLBACK_TRIGGERING_SPELL_AP_COST = new RunningEffectDefinition(919, new CharacGainFunctionTriggeringSpellCost(FighterCharacteristicType.AP), RunningEffectConstants.m_instance, 1008, "Gain des PA utilis\u00e9s pour le sort d\u00e9clencheur", RunningEffectStatus.POSITIVE);
        ROLLBACK_TRIGGERING_SPELL_MP_COST = new RunningEffectDefinition(920, new CharacGainFunctionTriggeringSpellCost(FighterCharacteristicType.MP), RunningEffectConstants.m_instance, 1005, "Gain des PM utilis\u00e9s pour le sort d\u00e9clencheur", RunningEffectStatus.POSITIVE);
        ROLLBACK_TRIGGERING_SPELL_WP_COST = new RunningEffectDefinition(921, new CharacGainFunctionTriggeringSpellCost(FighterCharacteristicType.WP), RunningEffectConstants.m_instance, -1, "Gain des PW utilis\u00e9s pour le sort d\u00e9clencheur", RunningEffectStatus.POSITIVE);
        HP_LOSS_PERCENT_OF_VALUE = new RunningEffectDefinition(922, new HpLossPercentOfValue(), RunningEffectConstants.m_instance, 1001, "Perte de PDV fonction de la valeur d\u00e9clenchante (sans modificateurs) (%)", RunningEffectStatus.NEGATIVE);
        EXECUTE_ACTION_COST = new RunningEffectDefinition(923, new ExecuteActionCost(), RunningEffectConstants.m_instance, -1, "Execute un cout en PA/PM", RunningEffectStatus.NEUTRAL);
        CHARAC_SET_AREA_HP = new RunningEffectDefinition(924, new CharacSet(FighterCharacteristicType.AREA_HP), RunningEffectConstants.m_instance, -1, "Fixe les Area Hps de la zone d'effet", RunningEffectStatus.NEUTRAL);
        AREA_HP_GAIN = new RunningEffectDefinition(925, new CharacGain(FighterCharacteristicType.AREA_HP), RunningEffectConstants.m_instance, -1, "Gain de Area HP", RunningEffectStatus.POSITIVE);
        INIT_BOOST = new RunningEffectDefinition(926, new CharacBuff(FighterCharacteristicType.INIT), RunningEffectConstants.m_instance, -1, "Boost d'Init (attention,  boost != gain ! g\u00e9n\u00e9ralement, ne pas utiliser", RunningEffectStatus.POSITIVE);
        RES_STASIS_LOSS_PERCENT = new RunningEffectDefinition(927, new CharacLoss(FighterCharacteristicType.RES_STASIS_PERCENT), RunningEffectConstants.m_instance, -1, "Perte de la r\u00e9sistance Stasis (%)", RunningEffectStatus.NEGATIVE);
        CHARAC_BUFF_BASED_ON_OTHER_CHARAC_VALUE = new RunningEffectDefinition(928, new CharacBuffBasedOnOtherCharacValue(), RunningEffectConstants.m_instance, -1, "Buff de charac en fonction d'une autre", RunningEffectStatus.NEUTRAL);
        CHARAC_SET_AP = new RunningEffectDefinition(929, new CharacSet(FighterCharacteristicType.AP), RunningEffectConstants.m_instance, -1, "Fixe la characteristique PA", RunningEffectStatus.NEUTRAL);
        CHARAC_SET_INIT = new RunningEffectDefinition(930, new CharacSet(FighterCharacteristicType.INIT), RunningEffectConstants.m_instance, -1, "Fixe la characteristique INIT", RunningEffectStatus.NEUTRAL);
        REPLACE_TARGET_BY_OWNER = new RunningEffectDefinition(931, new ReplaceTriggeringEffectTargetByOwner(), RunningEffectConstants.m_instance, -1, "Remplace la cible de l'effet d\u00e9clencheur par son propri\u00e9taire", RunningEffectStatus.NEUTRAL);
        DECURSE_LINKED_TO_CASTER = new RunningEffectDefinition(932, new DecurseLinkedToCaster(), RunningEffectConstants.m_instance, -1, "Retire de la cible les effets qui appartiennent au caster", RunningEffectStatus.NEUTRAL);
        CHANGE_PLAYER_SPELLS_BY_MONSTER_ONES = new RunningEffectDefinition(933, new ChangePlayerSpellsByMonsterOnes(), RunningEffectConstants.m_instance, -1, "Modifie les sorts d'un joueur par ceux d'un monstre", RunningEffectStatus.NEUTRAL);
        EXCLUDE_FROM_FIGHT = new RunningEffectDefinition(934, new ExcludeFromFight(), RunningEffectConstants.m_instance, -1, "Exclu la cible du combat", RunningEffectStatus.NEUTRAL);
        REMOVE_ALL_AREAS_WITH_ID = new RunningEffectDefinition(935, new RemoveAllAreasWithId(), RunningEffectConstants.m_instance, -1, "Retire toutes les zones d'id donn\u00e9", RunningEffectStatus.NEUTRAL);
        SPAWN_MONSTER = new RunningEffectDefinition(936, new SpawnMonsterForArcadeDungeon(), RunningEffectConstants.m_instance, -1, "Spawn un mob dans le combat", RunningEffectStatus.NEUTRAL);
        REMOVE_FROM_FIGHT_MAP = new RunningEffectDefinition(937, new RemoveFromFightMap(), RunningEffectConstants.m_instance, -1, "Retire la cible de la fightMap jusqu'a son prochain mouvement", RunningEffectStatus.NEUTRAL);
        REG_EXECUTION_COUNT_FUNCTION_TRIGGERING_ACTION_COST = new RunningEffectDefinition(938, new REGExecutionCountFunctionTriggeringActionCost(), RunningEffectConstants.m_instance, -1, "Execute le groupe x fois, en fonction du cout du sort", RunningEffectStatus.NEUTRAL);
        HP_LOSS_STASIS_EXPONENTIAL_GROWTH = new RunningEffectDefinition(939, new HpLossExponentialGrowth(Elements.STASIS), RunningEffectConstants.m_instance, 1001, "Perte de PdV Stasis avec \u00e9volution exponentielle (hpLoss = a + b * level ^ c)", RunningEffectStatus.NEGATIVE);
        HP_LOSS_FIRE_EXPONENTIAL_GROWTH = new RunningEffectDefinition(940, new HpLossExponentialGrowth(Elements.FIRE), RunningEffectConstants.m_instance, 1001, "Perte de PdV Feu avec \u00e9volution exponentielle (hpLoss = a + b * level ^ c)", RunningEffectStatus.NEGATIVE);
        HP_LOSS_EARTH_EXPONENTIAL_GROWTH = new RunningEffectDefinition(941, new HpLossExponentialGrowth(Elements.EARTH), RunningEffectConstants.m_instance, 1001, "Perte de PdV Terre avec \u00e9volution exponentielle (hpLoss = a + b * level ^ c)", RunningEffectStatus.NEGATIVE);
        HP_LOSS_AIR_EXPONENTIAL_GROWTH = new RunningEffectDefinition(942, new HpLossExponentialGrowth(Elements.AIR), RunningEffectConstants.m_instance, 1001, "Perte de PdV Air avec \u00e9volution exponentielle (hpLoss = a + b * level ^ c)", RunningEffectStatus.NEGATIVE);
        HP_LOSS_WATER_EXPONENTIAL_GROWTH = new RunningEffectDefinition(943, new HpLossExponentialGrowth(Elements.WATER), RunningEffectConstants.m_instance, 1001, "Perte de Eau avec \u00e9volution exponentielle (hpLoss = a + b * level ^ c)", RunningEffectStatus.NEGATIVE);
        RES_WATER_MODIFIED_BY_ARMOR_PLATE = new RunningEffectDefinition(944, new CharacModifiedByAnother(FighterCharacteristicType.ARMOR_PLATE, FighterCharacteristicType.RES_WATER_PERCENT), RunningEffectConstants.m_instance, -1, "Resist eau modifi\u00e9s par le nombre de plaque", RunningEffectStatus.NEUTRAL);
        RES_AIR_MODIFIED_BY_ARMOR_PLATE = new RunningEffectDefinition(945, new CharacModifiedByAnother(FighterCharacteristicType.ARMOR_PLATE, FighterCharacteristicType.RES_AIR_PERCENT), RunningEffectConstants.m_instance, -1, "Resist air modifi\u00e9s par le nombre de plaque", RunningEffectStatus.NEUTRAL);
        RES_EARTH_MODIFIED_BY_ARMOR_PLATE = new RunningEffectDefinition(946, new CharacModifiedByAnother(FighterCharacteristicType.ARMOR_PLATE, FighterCharacteristicType.RES_EARTH_PERCENT), RunningEffectConstants.m_instance, -1, "Resist terre modifi\u00e9s par le nombre de plaque", RunningEffectStatus.NEUTRAL);
        RES_FIRE_MODIFIED_BY_ARMOR_PLATE = new RunningEffectDefinition(947, new CharacModifiedByAnother(FighterCharacteristicType.ARMOR_PLATE, FighterCharacteristicType.RES_FIRE_PERCENT), RunningEffectConstants.m_instance, -1, "Resist feu modifi\u00e9s par le nombre de plaque", RunningEffectStatus.NEUTRAL);
        SET_CHRAGE_TO_DMG_RATIO = new RunningEffectDefinition(948, new SetChrageToDmgRatio(), RunningEffectConstants.m_instance, -1, "Change la valeur du ratio chrage -> dmg", RunningEffectStatus.NEUTRAL);
        REG_EXECUTION_COUNT_FIXED = new RunningEffectDefinition(949, new REGExecutionCountFixed(), RunningEffectConstants.m_instance, -1, "Execute le groupe x fois", RunningEffectStatus.NEUTRAL);
        SET_AP = new RunningEffectDefinition(950, new SetCharac(FighterCharacteristicType.AP), RunningEffectConstants.m_instance, -1, "Force la valeur des pa", RunningEffectStatus.POSITIVE);
        SET_MP = new RunningEffectDefinition(951, new SetCharac(FighterCharacteristicType.MP), RunningEffectConstants.m_instance, -1, "Force la valeur des pm", RunningEffectStatus.POSITIVE);
        SET_WP = new RunningEffectDefinition(952, new SetCharac(FighterCharacteristicType.WP), RunningEffectConstants.m_instance, -1, "Force la valeur des pw", RunningEffectStatus.POSITIVE);
        DEBUFF_FUMBLE_RATE = new RunningEffectDefinition(953, new CharacDebuff(FighterCharacteristicType.FUMBLE_RATE), RunningEffectConstants.m_instance, -1, "Debuff de la carac d'Echec Critique", RunningEffectStatus.POSITIVE);
        SET_MICROBOT_RAILS_MAX_DISTANCE = new RunningEffectDefinition(954, new SetCharac(FighterCharacteristicType.STEAMER_MICROBOT_MAX_DISTANCE), RunningEffectConstants.m_instance, -1, "D\u00e9finit le nombre max de rails entre 2 microbots", RunningEffectStatus.POSITIVE);
        VIRTUAL_HP_BOOST_IN_PERCENT_FUNCTION_ALLIES_COUNT = new RunningEffectDefinition(955, new CharacBoostInPercentFunctionAlliesCount(FighterCharacteristicType.VIRTUAL_HP), RunningEffectConstants.m_instance, -1, "Boost les PdV virtuel max de la cible en fct du nb d'alli\u00e9s", RunningEffectStatus.POSITIVE);
        VIRTUAL_HP_BOOST_IN_PERCENT = new RunningEffectDefinition(956, new CharacBoostInPercentFunctionCaster(FighterCharacteristicType.VIRTUAL_HP), RunningEffectConstants.m_instance, -1, "Boost les PdV virtual max de la cible (%) en fct des PdV max du caster", RunningEffectStatus.POSITIVE);
        SET_VIRTUAL_HP_FROM_HP = new RunningEffectDefinition(957, new SetVirtualHpFromHp(), RunningEffectConstants.m_instance, -1, "Initialise les VIRTUAL_HP en fonction du % de hp", RunningEffectStatus.NEUTRAL);
        HP_LOSS_IN_PERCENT_MAX_WITH_VIRTUAL = new RunningEffectDefinition(958, new HPLoss(Elements.PHYSICAL, HPLoss.ComputeMode.PERCENT_OF_MAX_TARGET_HP_WITH_VIRTUAL), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport au MAX de la cible (%) avec pv virtuel", RunningEffectStatus.NEGATIVE);
        HP_LOSS_IN_PERCENT_MAX_CASTER_WITH_VIRTUAL = new RunningEffectDefinition(959, new HPLoss(Elements.PHYSICAL, HPLoss.ComputeMode.PERCENT_OF_MAX_CASTER_HP_WITH_VIRTUAL), RunningEffectConstants.m_instance, 1001, "Perte de PdV par rapport au MAX du caster (%) avec pv virtuel", RunningEffectStatus.NEGATIVE);
        HP_LOSS_FIRE_FUNCTION_FIGHTER_LEVEL = new RunningEffectDefinition(960, new HpLossFunctionFighterLevel(Elements.FIRE, HPLoss.ComputeMode.CLASSIC, FighterCharacteristicType.HP), RunningEffectConstants.m_instance, 1001, "Perte de pdv Feu fonction du niveau du caster", RunningEffectStatus.NEGATIVE);
        HP_LOSS_EARTH_FUNCTION_FIGHTER_LEVEL = new RunningEffectDefinition(961, new HpLossFunctionFighterLevel(Elements.EARTH, HPLoss.ComputeMode.CLASSIC, FighterCharacteristicType.HP), RunningEffectConstants.m_instance, 1001, "Perte de pdv Terre fonction du niveau du caster", RunningEffectStatus.NEGATIVE);
        HP_LOSS_WATER_FUNCTION_FIGHTER_LEVEL = new RunningEffectDefinition(962, new HpLossFunctionFighterLevel(Elements.WATER, HPLoss.ComputeMode.CLASSIC, FighterCharacteristicType.HP), RunningEffectConstants.m_instance, 1001, "Perte de pdv Eau fonction du niveau du caster", RunningEffectStatus.NEGATIVE);
        HP_LOSS_AIR_FUNCTION_FIGHTER_LEVEL = new RunningEffectDefinition(963, new HpLossFunctionFighterLevel(Elements.AIR, HPLoss.ComputeMode.CLASSIC, FighterCharacteristicType.HP), RunningEffectConstants.m_instance, 1001, "Perte de pdv Air fonction du niveau du caster", RunningEffectStatus.NEGATIVE);
        HP_LOSS_STASIS_FUNCTION_FIGHTER_LEVEL = new RunningEffectDefinition(964, new HpLossFunctionFighterLevel(Elements.STASIS, HPLoss.ComputeMode.CLASSIC, FighterCharacteristicType.HP), RunningEffectConstants.m_instance, 1001, "Perte de pdv Stasis fonction du niveau du caster", RunningEffectStatus.NEGATIVE);
        ADD_SPELL_TO_TEMPORARY_SPELL_INVENTORY = new RunningEffectDefinition(965, new AddSpellToTemporaryInventory(), RunningEffectConstants.m_instance, -1, "Ajout d'un sort \u00e0 un inventaire de sorts temporaire", RunningEffectStatus.POSITIVE);
        PLANTATION_BONUS_PLANT = new RunningEffectDefinition(966, new EcosystemSkillModification(EcosystemActionType.PLANTATION, ResourceType.PLANT), RunningEffectConstants.m_instance, -1, "Ajoute un bonus aux chances de r\u00e9ussir une plantation de plante", RunningEffectStatus.NEUTRAL);
        PLANTATION_BONUS_TREE = new RunningEffectDefinition(967, new EcosystemSkillModification(EcosystemActionType.PLANTATION, ResourceType.TREE), RunningEffectConstants.m_instance, -1, "Ajoute un bonus aux chances de r\u00e9ussir une plantation d'arbre", RunningEffectStatus.NEUTRAL);
        PLANTATION_BONUS_CULTIVATION = new RunningEffectDefinition(968, new EcosystemSkillModification(EcosystemActionType.PLANTATION, ResourceType.CULTIVATION), RunningEffectConstants.m_instance, -1, "Ajoute un bonus aux chances de r\u00e9ussir une plantation de culture", RunningEffectStatus.NEUTRAL);
        PLANTATION_BONUS_MOB = new RunningEffectDefinition(969, new EcosystemSkillModification(EcosystemActionType.PLANTATION, ResourceType.MOB), RunningEffectConstants.m_instance, -1, "Ajoute un bonus aux chances de r\u00e9ussir une plantation de semence", RunningEffectStatus.NEUTRAL);
        CRAFT_CRAFT_XP_BONUS = new RunningEffectDefinition(970, new CraftSkillModification(CraftSkillType.CRAFT_CRAFT_XP_BOOST), RunningEffectConstants.m_instance, -1, "Ajoute un bonus a l'xp du craft d'un metier", RunningEffectStatus.NEUTRAL);
        COLLECT_BONUS_PLANT = new RunningEffectDefinition(971, new EcosystemSkillModification(EcosystemActionType.COLLECT, ResourceType.PLANT), RunningEffectConstants.m_instance, -1, "Ajoute un bonus a la quantite collect\u00e9e des plantes", RunningEffectStatus.NEUTRAL);
        COLLECT_BONUS_TREE = new RunningEffectDefinition(972, new EcosystemSkillModification(EcosystemActionType.COLLECT, ResourceType.TREE), RunningEffectConstants.m_instance, -1, "Ajoute un bonus a la quantite collect\u00e9e des arbres", RunningEffectStatus.NEUTRAL);
        COLLECT_BONUS_CULTIVATION = new RunningEffectDefinition(973, new EcosystemSkillModification(EcosystemActionType.COLLECT, ResourceType.CULTIVATION), RunningEffectConstants.m_instance, -1, "Ajoute un bonus a la quantite collect\u00e9e des cultures", RunningEffectStatus.NEUTRAL);
        COLLECT_BONUS_MOB = new RunningEffectDefinition(974, new EcosystemSkillModification(EcosystemActionType.COLLECT, ResourceType.MOB), RunningEffectConstants.m_instance, -1, "Ajoute un bonus a la quantite collect\u00e9e des monstres", RunningEffectStatus.NEUTRAL);
        COLLECT_BONUS_MINERAL = new RunningEffectDefinition(975, new EcosystemSkillModification(EcosystemActionType.COLLECT, ResourceType.MINERAL), RunningEffectConstants.m_instance, -1, "Ajoute un bonus a la quantite collect\u00e9e des minerais", RunningEffectStatus.NEUTRAL);
        COLLECT_BONUS_FISH = new RunningEffectDefinition(976, new EcosystemSkillModification(EcosystemActionType.COLLECT, ResourceType.FISH), RunningEffectConstants.m_instance, -1, "Ajoute un bonus a la quantite collect\u00e9e des poissons", RunningEffectStatus.NEUTRAL);
        CRAFT_QUICKNESS_BONUS = new RunningEffectDefinition(977, new CraftSkillModification(CraftSkillType.CRAFT_QUICKNESS), RunningEffectConstants.m_instance, -1, "Ajoute un bonus a la rapidit\u00e9 de craft d'un metier", RunningEffectStatus.NEUTRAL);
        PLANTATION_BONUS_TREASURE = new RunningEffectDefinition(978, new EcosystemSkillModification(EcosystemActionType.PLANTATION, ResourceType.TREASURE), RunningEffectConstants.m_instance, -1, "Ajoute un bonus aux chances de r\u00e9ussir une plantation de tresor", RunningEffectStatus.NEUTRAL);
        ALL_ELEMENTAL_SPELL_GAIN = new RunningEffectDefinition(979, new AllElementalSpellGain(), RunningEffectConstants.m_instance, -1, "Gain de niveau de sort tous \u00e9l\u00e9ments (sauf support)", RunningEffectStatus.NEUTRAL);
        PASSIVE_SPELL_GAIN = new RunningEffectDefinition(980, new PassiveSpellGain(), RunningEffectConstants.m_instance, -1, "Gain de niveau des sorts passifs", RunningEffectStatus.NEUTRAL);
        ACTIVE_SUPPORT_SPELL_GAIN = new RunningEffectDefinition(981, new ActiveSupportSpellGain(), RunningEffectConstants.m_instance, -1, "Gain de niveau des sorts de support actifs", RunningEffectStatus.NEUTRAL);
        REMOVE_PASSIVE_SPELLS = new RunningEffectDefinition(982, new RemoveEffectFromContainerType(25), RunningEffectConstants.m_instance, -1, "Retire les effets des sorts passifs", RunningEffectStatus.NEUTRAL);
        AP_SET_TO_MAX = new RunningEffectDefinition(983, new SetCharacToMax(FighterCharacteristicType.AP), RunningEffectConstants.m_instance, -1, "Regen des AP au max", RunningEffectStatus.POSITIVE);
        SET_VITUAL_HP = new RunningEffectDefinition(984, new SetCharac(FighterCharacteristicType.VIRTUAL_HP), RunningEffectConstants.m_instance, -1, "Force la valeur des VIRTUAL_HP", RunningEffectStatus.POSITIVE);
        VIRTUAL_HP_SET_TO_MAX = new RunningEffectDefinition(985, new SetCharacToMax(FighterCharacteristicType.VIRTUAL_HP), RunningEffectConstants.m_instance, -1, "Regen des VIRTUAL_HP au max", RunningEffectStatus.POSITIVE);
        UPDATE_HP_MAX_PERCENT_MODIFIER = new RunningEffectDefinition(986, new UpdateCharacMaxPercentModifier(FighterCharacteristicType.HP), RunningEffectConstants.m_instance, -1, "Change la valeur du modificateur en % des PdV", RunningEffectStatus.NEUTRAL);
        ADD_BONUS_LOOT = new RunningEffectDefinition(987, new AddBonusLoot(), RunningEffectConstants.m_instance, 1016, "Ajoute un objet bonus a la fin du combat a la cible", RunningEffectStatus.POSITIVE);
        CRITICAL_RES_GAIN = new RunningEffectDefinition(988, new CharacGain(FighterCharacteristicType.CRITICAL_RES), RunningEffectConstants.m_instance, -1, "Augmente la resist aux degats des Coup Critique", RunningEffectStatus.POSITIVE);
        UPDATE_VIRTUAL_HP_MAX_PERCENT_MODIFIER = new RunningEffectDefinition(989, new UpdateCharacMaxPercentModifier(FighterCharacteristicType.VIRTUAL_HP), RunningEffectConstants.m_instance, -1, "Change la valeur du modificateur en % des PdV virtuels", RunningEffectStatus.NEUTRAL);
        HP_GAIN_FOR_UNDEAD = new RunningEffectDefinition(990, new HPGainForUndead(), RunningEffectConstants.m_instance, 1002, "Gain de PdV outrepasse Mort Vivant", RunningEffectStatus.NEUTRAL);
        KO_TIME_BEFORE_DEATH_BUFF = new RunningEffectDefinition(991, new CharacBuff(FighterCharacteristicType.KO_TIME_BEFORE_DEATH), RunningEffectConstants.m_instance, -1, "Boost de la dur\u00e9e du KO", RunningEffectStatus.NEUTRAL);
        TELEPORT_CASTER_BEHIND_TARGET = new RunningEffectDefinition(992, new TeleportCasterBehindTarget(), RunningEffectConstants.m_instance, -1, "Teleporte le caster derriere la cible", RunningEffectStatus.NEUTRAL);
        CHANGE_SPELL_TARGET_CELL_BY_CASTER_CELL = new RunningEffectDefinition(993, new ChangeSpellTargetCellByCasterCell(), RunningEffectConstants.m_instance, -1, "Change la cible du sort par la position du caster de cet effet", RunningEffectStatus.NEUTRAL);
        SUMMON_DOUBLE_FOR_ICE_STATUE = new RunningEffectDefinition(994, new SummonDoubleForIceStatue(), RunningEffectConstants.m_instance, -1, "Invoque un double statue de glace", RunningEffectStatus.NEUTRAL);
        RUNNING_EFFECT_GROUP_LEVEL_FUNCTION_SPELL = new RunningEffectDefinition(995, new RunningEffectGroupLevelFunctionSpell(), RunningEffectConstants.m_instance, -1, "Groupe d'effet avec niveau des enfants fonction du sort pass\u00e9 en parametre", RunningEffectStatus.NEUTRAL);
        OSA_INVOCATION_KNOWLEDGE_GAIN = new RunningEffectDefinition(996, new CharacGain(FighterCharacteristicType.OSA_INVOCATION_KNOWLEDGE), RunningEffectConstants.m_instance, -1, "Augmente Art de l'invocation", RunningEffectStatus.POSITIVE);
        VIRTUAL_ARMOR_FLAT = new RunningEffectDefinition(997, new VirtualArmorWithElement(), RunningEffectConstants.m_instance, 1014, "Armure : absorbe une quantit\u00e9 de d\u00e9gats fixe ou \u00e9l\u00e9mentaire", RunningEffectStatus.POSITIVE);
        DMG_WATER_PERCENT_GAIN_FCT_CASTER_DMG_EARTH_PERCENT = new RunningEffectDefinition(998, new CharacGainFunctionCasterCharacAtApplication(FighterCharacteristicType.DMG_WATER_PERCENT, new CharacteristicType[] { FighterCharacteristicType.DMG_EARTH_PERCENT, FighterCharacteristicType.DMG_IN_PERCENT }), RunningEffectConstants.m_instance, -1, "Gain aux d\u00e9g\u00e2ts eau de la cible fct des d\u00e9g\u00e2ts terre et all du caster calcul\u00e9 a l'application", RunningEffectStatus.POSITIVE);
        RUNNING_EFFECT_GROUP_LEVEL_FUNCTION_CHARACTER_LEVEL = new RunningEffectDefinition(999, new RunningEffectGroupLevelFunctionCharacterLevel(), RunningEffectConstants.m_instance, -1, "Groupe d'effets avec niveau fonction du niveau du caster/cible", RunningEffectStatus.NEUTRAL);
        CHANGE_TRIGERRING_EFFECT_TARGET = new RunningEffectDefinition(1000, new ChangeTriggeringEffectTarget(), RunningEffectConstants.m_instance, -1, "Change la cible de l'effet declencheur et modifie la valeur", RunningEffectStatus.NEUTRAL);
        COPY_CHARAC_AT_APPLICATION_VALUE = new RunningEffectDefinition(1001, new CopyCharacAtApplicationValue(), RunningEffectConstants.m_instance, -1, "Copie la valeur de la charac calcul\u00e9e a l'application (caster -> cible, pas de rollback)", RunningEffectStatus.NEUTRAL);
        SUMMON_ZOBAL_DOUBLE = new RunningEffectDefinition(1002, new SummonZobalDouble(), RunningEffectConstants.m_instance, -1, "Invoque un Double Zobal", RunningEffectStatus.NEUTRAL);
        KO_TIME_BEFORE_DEATH_MIN_MODIFICATION = new RunningEffectDefinition(1003, new CharacMinModification(FighterCharacteristicType.KO_TIME_BEFORE_DEATH), RunningEffectConstants.m_instance, -1, "Modifie le min de jauge de KO", RunningEffectStatus.NEUTRAL);
        MODIFY_DMG_IN_PERCENT_FUNCTION_DODGE = new RunningEffectDefinition(1004, new CharacModifiedByAnother(FighterCharacteristicType.DODGE, FighterCharacteristicType.DMG_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Modification des DMG en fonction de l'esquive", RunningEffectStatus.NEUTRAL);
        APPLY_STATE_CAPED_BY_ANOTHER_STATE = new RunningEffectDefinition(1005, new ApplyStateLevelCapedByAnotherState(), RunningEffectConstants.m_instance, -1, "Applique un etat en capant son niveau par le niveau d'un autre \u00e9tat", RunningEffectStatus.NEUTRAL);
        REG_SUB_EFFECT_VALUE_FUNCTION_CASTER_AP = new RunningEffectDefinition(1006, new RunningEffectGroupWithSubEffectValueFunctionCasterCharacAtApplication(new CharacteristicType[] { FighterCharacteristicType.AP }), RunningEffectConstants.m_instance, -1, "Groupe d'effets qui calcule une valeur pour les ss-effets fct des PA du caster", RunningEffectStatus.NEUTRAL);
        REG_SUB_EFFECT_VALUE_FUNCTION_CASTER_MP = new RunningEffectDefinition(1007, new RunningEffectGroupWithSubEffectValueFunctionCasterCharacAtApplication(new CharacteristicType[] { FighterCharacteristicType.MP }), RunningEffectConstants.m_instance, -1, "Groupe d'effets qui calcule une valeur pour les ss-effets fct des PM du caster", RunningEffectStatus.NEUTRAL);
        SET_EFFECT_AREA_FOR_ORIGINAL_CONTROLLER = new RunningEffectDefinition(1008, new SetEffectAreaForOriginalController(), RunningEffectConstants.m_instance, -1, "Pose une zone d'effet pour le controller original", RunningEffectStatus.NEUTRAL);
        MODIFY_HEAL_BONUS_IN_PERCENT_FUNCTION_DODGE = new RunningEffectDefinition(1009, new CharacModifiedByAnother(FighterCharacteristicType.DODGE, FighterCharacteristicType.HEAL_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Modification des BOnus aux Soins en fonction de l'esquive", RunningEffectStatus.NEUTRAL);
        ARMOR_GAIN = new RunningEffectDefinition(1010, new CharacGain(FighterCharacteristicType.ARMOR), RunningEffectConstants.m_instance, -1, "Gain d'armure", RunningEffectStatus.POSITIVE);
        ARMOR_LOSS = new RunningEffectDefinition(1011, new CharacLoss(FighterCharacteristicType.ARMOR), RunningEffectConstants.m_instance, -1, "Perte d'armure", RunningEffectStatus.NEGATIVE);
        ARMOR_ELEMENTAL_GAIN = new RunningEffectDefinition(1012, new ElementalCharacGain(FighterCharacteristicType.ARMOR), RunningEffectConstants.m_instance, -1, "Gain d'armure \u00e9l\u00e9mentaire (prend en compte le bonus au degats)", RunningEffectStatus.POSITIVE);
        REDUCE_ZONE_EFFECT = new RunningEffectDefinition(1013, new ReduceZoneEffect(), RunningEffectConstants.m_instance, -1, "Reduit la valeur des effets de zones", RunningEffectStatus.NEUTRAL);
        COPY_CHARAC_IN_REAL_TIME = new RunningEffectDefinition(1014, new CopyCharacInRealTime(), RunningEffectConstants.m_instance, -1, "Copie une charac en temps r\u00e9el", RunningEffectStatus.NEUTRAL);
        BEST_ELEMENT_HP_LOSS = new RunningEffectDefinition(1015, new BestElementHpLoss(), RunningEffectConstants.m_instance, 1001, "Perte de Pdv de meilleur \u00e9l\u00e9ment", RunningEffectStatus.NEGATIVE);
        BEST_ELEMENT_HP_GAIN = new RunningEffectDefinition(1016, new BestElementHpGain(), RunningEffectConstants.m_instance, 1002, "Gain de Pdv de meilleur \u00e9l\u00e9ment", RunningEffectStatus.POSITIVE);
        BEST_ELEMENT_HP_GAIN_FUNCTION_PA_PM = new RunningEffectDefinition(1017, new BestElementHpGainFunctionPaPm(), RunningEffectConstants.m_instance, 1002, "Gain de Pdv de meilleur \u00e9l\u00e9ment fonction des pa pm restants", RunningEffectStatus.POSITIVE);
        SPECIFIC_FOR_ARMOR_DAMAGE_REBOUND = new RunningEffectDefinition(1018, new SpecificForArmorDamageRebound(), RunningEffectConstants.m_instance, -1, "Effet sp\u00e9cial pour le renvoi de degats sur armure (sous effets possibles)", RunningEffectStatus.NEUTRAL);
        PVP_BUFF_GAIN = new RunningEffectDefinition(1019, new PvPBuffGain(), RunningEffectConstants.m_instance, -1, "Buff PvP (vie et sorts)", RunningEffectStatus.NEUTRAL);
        RUNNING_EFFECT_GROUP_LEVEL_FUNCTION_TRIGGERING_VALUE = new RunningEffectDefinition(1020, new RunningEffectGroupLevelFunctionTriggeringValue(), RunningEffectConstants.m_instance, -1, "Groupe d'effets avec niveau des enfants fonction de la valeur de l'effet d\u00e9clencheur", RunningEffectStatus.NEUTRAL);
        REMOVE_BLOCKING_AREA_USING_TARGET = new RunningEffectDefinition(1021, new RemoveBlockingAreaUsingTarget(), RunningEffectConstants.m_instance, -1, "Retire une zone bloquante en s\u00e9lectionnant la zone comme cible", RunningEffectStatus.NEUTRAL);
        CRAFT_ECOSYSTEM_XP_BONUS = new RunningEffectDefinition(1022, new CraftSkillModification(CraftSkillType.CRAFT_ECOSYSTEM_XP_BOOST), RunningEffectConstants.m_instance, -1, "Ajoute un bonus a l'xp d'action d'ecosysteme (plantation/r\u00e9colte) d'un metier", RunningEffectStatus.NEUTRAL);
        CRAFT_XP_BONUS = new RunningEffectDefinition(1023, new CraftXpBoost(), RunningEffectConstants.m_instance, -1, "Ajoute un bonus a l'xp d'un metier (creation d'item/plantation/recolte)", RunningEffectStatus.NEUTRAL);
        STATE_DECURSE_FOR_HYPERACTION = new RunningEffectDefinition(1024, new StateDecurseForHyperaction(), RunningEffectConstants.m_instance, -1, "D\u00e9sapplication pour l'hyperaction (lvl * pa restant)", RunningEffectStatus.NEUTRAL);
        HP_GAIN_FUNCTION_CASTER_EARTH = new RunningEffectDefinition(1025, new HPGainForTargetBasedOnCaster(Elements.EARTH), RunningEffectConstants.m_instance, -1, "Soins de la cible par rapport aux PdV du caster - Terre", RunningEffectStatus.NEUTRAL);
        HP_GAIN_FUNCTION_CASTER_AIR = new RunningEffectDefinition(1026, new HPGainForTargetBasedOnCaster(Elements.AIR), RunningEffectConstants.m_instance, -1, "Soins de la cible par rapport aux PdV du caster - Air", RunningEffectStatus.NEUTRAL);
        HP_GAIN_FUNCTION_CASTER_WATER = new RunningEffectDefinition(1027, new HPGainForTargetBasedOnCaster(Elements.WATER), RunningEffectConstants.m_instance, -1, "Soins de la cible par rapport aux PdV du caster - Water", RunningEffectStatus.NEUTRAL);
        HP_GAIN_FUNCTION_CASTER_FIRE = new RunningEffectDefinition(1028, new HPGainForTargetBasedOnCaster(Elements.FIRE), RunningEffectConstants.m_instance, -1, "Soins de la cible par rapport aux PdV du caster - Feu", RunningEffectStatus.NEUTRAL);
        HP_GAIN_FUNCTION_CASTER_PHYSICAL = new RunningEffectDefinition(1029, new HPGainForTargetBasedOnCaster(Elements.PHYSICAL), RunningEffectConstants.m_instance, -1, "Soins de la cible par rapport aux PdV du caster - Neutre", RunningEffectStatus.NEUTRAL);
        SET_TEAM_ID = new RunningEffectDefinition(1030, new SetTeamId(), RunningEffectConstants.m_instance, -1, "Change la team de la cible", RunningEffectStatus.NEUTRAL);
        REMOVE_EQUIPMENT_EFFECTS = new RunningEffectDefinition(1031, new RemoveEffectFromContainerType(12), RunningEffectConstants.m_instance, -1, "Retire les effets des \u00e9quipements (hors bonus de panoplie)", RunningEffectStatus.NEUTRAL);
        REMOVE_SET_EFFECTS = new RunningEffectDefinition(1032, new RemoveEffectFromContainerType(14), RunningEffectConstants.m_instance, -1, "Retire les effets des panoplies", RunningEffectStatus.NEUTRAL);
        SET_STEAMER_BLOCK = new RunningEffectDefinition(1033, new SetSteamerBlock(), RunningEffectConstants.m_instance, -1, "Pose une zone et l'initialise comme un bloc Steamer", RunningEffectStatus.NEUTRAL);
        STEAMER_BLOCK_PASSIVE_RESIST = new RunningEffectDefinition(1034, new SimpleValueEffect(), RunningEffectConstants.m_instance, -1, "Bonus \u00e0 la resist all des blocs Steamer", RunningEffectStatus.NEUTRAL);
        STEAMER_BLOCK_DAMAGE_REDIRECTION = new RunningEffectDefinition(1035, new SteamerBlockDamageRedirection(), RunningEffectConstants.m_instance, -1, "Redirection des d\u00e9gats vers les blocs du steamer", RunningEffectStatus.NEUTRAL);
        WEAKEST_RESIST_GAIN = new RunningEffectDefinition(1036, new WeakestResistGain(), RunningEffectConstants.m_instance, -1, "Gain pour la plus faible resist", RunningEffectStatus.NEUTRAL);
        STEAMER_DAMAGE_REDIRECTION = new RunningEffectDefinition(1037, new SteamerDamageRedirection(), RunningEffectConstants.m_instance, -1, "Redirection des d\u00e9g\u00e2ts vers le steamer", RunningEffectStatus.NEUTRAL);
        ADD_CHARAC_VALUE_TO_ANOTHER_IN_REAL_TIME = new RunningEffectDefinition(1038, new AddCharacValueToAnotherInRealTime(), RunningEffectConstants.m_instance, -1, "Ajoute la valeur de la charac source \u00e0 la charac cible en temps r\u00e9el", RunningEffectStatus.NEUTRAL);
        CHARAC_SET_LEADERSHIP = new RunningEffectDefinition(1039, new CharacSet(FighterCharacteristicType.LEADERSHIP), RunningEffectConstants.m_instance, -1, "Fixe la characteristique Controle", RunningEffectStatus.NEUTRAL);
        SET_RESISTANCE_TARGET = new RunningEffectDefinition(1040, new SetResistanceTarget(), RunningEffectConstants.m_instance, -1, "Le caster devient la reference pour les resistances de la cible", RunningEffectStatus.NEUTRAL);
        REG_EXECUTION_COUNT_FUNCTION_ALLIES_COUNT = new RunningEffectDefinition(1041, new REGExecutionCountFunctionAlliesCount(), RunningEffectConstants.m_instance, -1, "Execute le groupe autant de fois que le caster a d'alli\u00e9s", RunningEffectStatus.NEUTRAL);
        BARRIER_ELEMENTAL_GAIN = new RunningEffectDefinition(1042, new ElementalCharacGain(FighterCharacteristicType.BARRIER), RunningEffectConstants.m_instance, -1, "Gain de barri\u00e8re (BARRIER) \u00e9l\u00e9mentaire (prend en compte le bonus au degats)", RunningEffectStatus.NEGATIVE);
        UPDATE_TACKLE_HP_MAX_PERCENT_MODIFIER = new RunningEffectDefinition(1043, new UpdateCharacMaxPercentModifier(FighterCharacteristicType.TACKLE), RunningEffectConstants.m_instance, -1, "Change la valeur du modificateur en % du tacle", RunningEffectStatus.NEUTRAL);
        CHANGE_AREA_POSITION = new RunningEffectDefinition(1044, new ChangeAreaPosition(), RunningEffectConstants.m_instance, -1, "D\u00e9place la zone d'effet cibl\u00e9e sur la cellule cibl\u00e9e", RunningEffectStatus.NEUTRAL);
        MODIFY_RES_IN_PERCENT_FUNCTION_TACKLE = new RunningEffectDefinition(1045, new CharacModifiedByAnother(FighterCharacteristicType.TACKLE, FighterCharacteristicType.RES_IN_PERCENT), RunningEffectConstants.m_instance, -1, "Modification des RES All en fonction du tacle", RunningEffectStatus.NEUTRAL);
        ADD_TO_AI_PRIORITY_TARGETS = new RunningEffectDefinition(1046, new AddToAiIgnoreResistancesTargets(), RunningEffectConstants.m_instance, -1, "Ajout le caster (personnage) aux cibles dont on ignore les r\u00e9sistances dans l'ia de la cible", RunningEffectStatus.NEUTRAL);
        RUNNING_EFFECT_GROUP_LEVEL_FUNCTION_TOTAL_HP = new RunningEffectDefinition(1047, new RunningEffectGroupLevelFunctionTotalHp(), RunningEffectConstants.m_instance, -1, "Groupe d'effet avec niveau des enfants fonction des hps totaux", RunningEffectStatus.NEUTRAL);
        DIVIDE_HP_LOSS_UNLESS_THRESHOLD = new RunningEffectDefinition(1048, new DividedHpLossUnlessThreshold(), RunningEffectConstants.m_instance, -1, "Divise les d\u00e9g\u00e2ts en dessous d'un certain nombre de cible (n\u00e9cessite un sous effet de perte de pdv", RunningEffectStatus.NEUTRAL);
        SWITCH_CHARAC_VALUES = new RunningEffectDefinition(1049, new SwitchCharacValues(), RunningEffectConstants.m_instance, -1, "Inverse la valeur de 2 caracs", RunningEffectStatus.NEUTRAL);
        AOE_DMG_GAIN = new RunningEffectDefinition(1050, new CharacGain(FighterCharacteristicType.AOE_DMG), RunningEffectConstants.m_instance, -1, "Gain aux d\u00e9g\u00e2ts de zone", RunningEffectStatus.POSITIVE);
        SINGLE_TARGET_DMG_GAIN = new RunningEffectDefinition(1051, new CharacGain(FighterCharacteristicType.SINGLE_TARGET_DMG), RunningEffectConstants.m_instance, -1, "Gain aux d\u00e9g\u00e2ts monocible", RunningEffectStatus.POSITIVE);
        MELEE_DMG_GAIN = new RunningEffectDefinition(1052, new CharacGain(FighterCharacteristicType.MELEE_DMG), RunningEffectConstants.m_instance, -1, "Gain aux d\u00e9g\u00e2ts de mel\u00e9e", RunningEffectStatus.POSITIVE);
        RANGED_DMG_GAIN = new RunningEffectDefinition(1053, new CharacGain(FighterCharacteristicType.RANGED_DMG), RunningEffectConstants.m_instance, -1, "Gain aux d\u00e9g\u00e2ts \u00e0 distance", RunningEffectStatus.POSITIVE);
        NON_CRIT_DMG_GAIN = new RunningEffectDefinition(1054, new CharacGain(FighterCharacteristicType.NON_CRIT_DMG), RunningEffectConstants.m_instance, -1, "Gain aux d\u00e9g\u00e2ts non critiques", RunningEffectStatus.POSITIVE);
        BERSERK_DMG_GAIN = new RunningEffectDefinition(1055, new CharacGain(FighterCharacteristicType.BERSERK_DMG), RunningEffectConstants.m_instance, -1, "Gain aux d\u00e9g\u00e2ts berserk", RunningEffectStatus.POSITIVE);
        CRITICAL_BONUS_LOSS = new RunningEffectDefinition(1056, new CharacLoss(FighterCharacteristicType.CRITICAL_BONUS), RunningEffectConstants.m_instance, -1, "Perte aux d\u00e9g\u00e2ts critiques", RunningEffectStatus.NEGATIVE);
        SINGLE_TARGET_DMG_LOSS = new RunningEffectDefinition(1057, new CharacLoss(FighterCharacteristicType.SINGLE_TARGET_DMG), RunningEffectConstants.m_instance, -1, "Perte aux d\u00e9g\u00e2ts monocible", RunningEffectStatus.NEGATIVE);
        AOE_DMG_LOSS = new RunningEffectDefinition(1058, new CharacLoss(FighterCharacteristicType.AOE_DMG), RunningEffectConstants.m_instance, -1, "Perte aux d\u00e9g\u00e2ts de zone", RunningEffectStatus.NEGATIVE);
        MELEE_DMG_LOSS = new RunningEffectDefinition(1059, new CharacLoss(FighterCharacteristicType.MELEE_DMG), RunningEffectConstants.m_instance, -1, "Perte aux d\u00e9g\u00e2ts de mel\u00e9e", RunningEffectStatus.NEGATIVE);
        RANGED_DMG_LOSS = new RunningEffectDefinition(1060, new CharacLoss(FighterCharacteristicType.RANGED_DMG), RunningEffectConstants.m_instance, -1, "Perte aux d\u00e9g\u00e2ts \u00e0 distance", RunningEffectStatus.NEGATIVE);
        BERSERK_DMG_LOSS = new RunningEffectDefinition(1061, new CharacLoss(FighterCharacteristicType.BERSERK_DMG), RunningEffectConstants.m_instance, -1, "Perte aux d\u00e9g\u00e2ts berserk", RunningEffectStatus.NEGATIVE);
        CRITICAL_RES_LOSS = new RunningEffectDefinition(1062, new CharacLoss(FighterCharacteristicType.CRITICAL_RES), RunningEffectConstants.m_instance, -1, "Perte de r\u00e9sistance aux critiques", RunningEffectStatus.NEGATIVE);
        RES_BACKSTAB_LOSS = new RunningEffectDefinition(1063, new CharacLoss(FighterCharacteristicType.RES_BACKSTAB), RunningEffectConstants.m_instance, -1, "Perte de r\u00e9sistance aux d\u00e9gats pris de dos", RunningEffectStatus.NEGATIVE);
        LEADERSHIP_LOSS = new RunningEffectDefinition(1064, new CharacLoss(FighterCharacteristicType.LEADERSHIP), RunningEffectConstants.m_instance, -1, "Perte en Controle", RunningEffectStatus.NEGATIVE);
        SPELL_WITH_PROPERTY_AP_COST_REDUCTION = new RunningEffectDefinition(1065, new SpellsWithPropertyApCostReduction(), RunningEffectConstants.m_instance, -1, "R\u00e9duit le co\u00fbt en PA des sorts portant une propri\u00e9t\u00e9", RunningEffectStatus.POSITIVE);
        SPELL_WITH_PROPERTY_RANGE_GAIN = new RunningEffectDefinition(1066, new SpellsWithPropertyRangeGain(), RunningEffectConstants.m_instance, -1, "Augmente la port\u00e9e des sorts portant une propri\u00e9t\u00e9", RunningEffectStatus.POSITIVE);
        TACKLE_ACTION_COST = new RunningEffectDefinition(1067, new TackleActionCost(), RunningEffectConstants.m_instance, 1041, "Utilisation de PA/PM pour le tacle (\u00e0 ne pas utiliser normalement)", RunningEffectStatus.NEGATIVE);
        VARIABLE_ELEMENTS_DAMAGE_GAIN = new RunningEffectDefinition(1068, new VariableElementDamageGain(), RunningEffectConstants.m_instance, -1, "Bonus de d\u00e9gats \u00e9l\u00e9mentaire dans un nombre variable d'\u00e9l\u00e9ments", RunningEffectStatus.POSITIVE);
        VARIABLE_ELEMENTS_RES_GAIN = new RunningEffectDefinition(1069, new VariableElementResistanceGain(), RunningEffectConstants.m_instance, -1, "Bonus de r\u00e9sistance \u00e9l\u00e9mentaire dans un nombre variable d'\u00e9l\u00e9ments", RunningEffectStatus.POSITIVE);
        ADD_CHARAC_VALUE_TO_ANOTHER_IN_REAL_TIME_WITH_THRESHOLD = new RunningEffectDefinition(1070, new AddCharacValueToAnotherInRealTimeWithThreshold(), RunningEffectConstants.m_instance, -1, "Ajoute la valeur de la charac source \u00e0 la charac cible en temps r\u00e9el (avec palier)", RunningEffectStatus.NEUTRAL);
        VIRTUAL_HP_BOOST = new RunningEffectDefinition(1071, new CharacBuff(FighterCharacteristicType.VIRTUAL_HP), RunningEffectConstants.m_instance, -1, "Boost de PdV Virtuels", RunningEffectStatus.POSITIVE);
        REVERSI_CHECK_FOR_REVERSABLE = new RunningEffectDefinition(1072, new ReversiCheckForReversable(), RunningEffectConstants.m_instance, -1, "Mini jeu Reversi - Marque les pions retournables", RunningEffectStatus.POSITIVE);
    }
}
